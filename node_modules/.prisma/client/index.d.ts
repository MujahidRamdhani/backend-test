
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model DataPenerimaBantuan
 * 
 */
export type DataPenerimaBantuan = $Result.DefaultSelection<Prisma.$DataPenerimaBantuanPayload>
/**
 * Model kecamatan
 * 
 */
export type kecamatan = $Result.DefaultSelection<Prisma.$kecamatanPayload>
/**
 * Model Kabupaten
 * 
 */
export type Kabupaten = $Result.DefaultSelection<Prisma.$KabupatenPayload>
/**
 * Model Provinsi
 * 
 */
export type Provinsi = $Result.DefaultSelection<Prisma.$ProvinsiPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const status: {
  Pending: 'Pending',
  Disetujui: 'Disetujui',
  Ditolak: 'Ditolak'
};

export type status = (typeof status)[keyof typeof status]

}

export type status = $Enums.status

export const status: typeof $Enums.status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more DataPenerimaBantuans
 * const dataPenerimaBantuans = await prisma.dataPenerimaBantuan.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more DataPenerimaBantuans
   * const dataPenerimaBantuans = await prisma.dataPenerimaBantuan.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.dataPenerimaBantuan`: Exposes CRUD operations for the **DataPenerimaBantuan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataPenerimaBantuans
    * const dataPenerimaBantuans = await prisma.dataPenerimaBantuan.findMany()
    * ```
    */
  get dataPenerimaBantuan(): Prisma.DataPenerimaBantuanDelegate<ExtArgs>;

  /**
   * `prisma.kecamatan`: Exposes CRUD operations for the **kecamatan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kecamatans
    * const kecamatans = await prisma.kecamatan.findMany()
    * ```
    */
  get kecamatan(): Prisma.kecamatanDelegate<ExtArgs>;

  /**
   * `prisma.kabupaten`: Exposes CRUD operations for the **Kabupaten** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kabupatens
    * const kabupatens = await prisma.kabupaten.findMany()
    * ```
    */
  get kabupaten(): Prisma.KabupatenDelegate<ExtArgs>;

  /**
   * `prisma.provinsi`: Exposes CRUD operations for the **Provinsi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Provinsis
    * const provinsis = await prisma.provinsi.findMany()
    * ```
    */
  get provinsi(): Prisma.ProvinsiDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    DataPenerimaBantuan: 'DataPenerimaBantuan',
    kecamatan: 'kecamatan',
    Kabupaten: 'Kabupaten',
    Provinsi: 'Provinsi'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "dataPenerimaBantuan" | "kecamatan" | "kabupaten" | "provinsi"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      DataPenerimaBantuan: {
        payload: Prisma.$DataPenerimaBantuanPayload<ExtArgs>
        fields: Prisma.DataPenerimaBantuanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataPenerimaBantuanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataPenerimaBantuanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>
          }
          findFirst: {
            args: Prisma.DataPenerimaBantuanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataPenerimaBantuanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>
          }
          findMany: {
            args: Prisma.DataPenerimaBantuanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>[]
          }
          create: {
            args: Prisma.DataPenerimaBantuanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>
          }
          createMany: {
            args: Prisma.DataPenerimaBantuanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DataPenerimaBantuanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>
          }
          update: {
            args: Prisma.DataPenerimaBantuanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>
          }
          deleteMany: {
            args: Prisma.DataPenerimaBantuanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataPenerimaBantuanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DataPenerimaBantuanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataPenerimaBantuanPayload>
          }
          aggregate: {
            args: Prisma.DataPenerimaBantuanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataPenerimaBantuan>
          }
          groupBy: {
            args: Prisma.DataPenerimaBantuanGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataPenerimaBantuanGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataPenerimaBantuanCountArgs<ExtArgs>
            result: $Utils.Optional<DataPenerimaBantuanCountAggregateOutputType> | number
          }
        }
      }
      kecamatan: {
        payload: Prisma.$kecamatanPayload<ExtArgs>
        fields: Prisma.kecamatanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.kecamatanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.kecamatanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>
          }
          findFirst: {
            args: Prisma.kecamatanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.kecamatanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>
          }
          findMany: {
            args: Prisma.kecamatanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>[]
          }
          create: {
            args: Prisma.kecamatanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>
          }
          createMany: {
            args: Prisma.kecamatanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.kecamatanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>
          }
          update: {
            args: Prisma.kecamatanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>
          }
          deleteMany: {
            args: Prisma.kecamatanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.kecamatanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.kecamatanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kecamatanPayload>
          }
          aggregate: {
            args: Prisma.KecamatanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKecamatan>
          }
          groupBy: {
            args: Prisma.kecamatanGroupByArgs<ExtArgs>
            result: $Utils.Optional<KecamatanGroupByOutputType>[]
          }
          count: {
            args: Prisma.kecamatanCountArgs<ExtArgs>
            result: $Utils.Optional<KecamatanCountAggregateOutputType> | number
          }
        }
      }
      Kabupaten: {
        payload: Prisma.$KabupatenPayload<ExtArgs>
        fields: Prisma.KabupatenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KabupatenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KabupatenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>
          }
          findFirst: {
            args: Prisma.KabupatenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KabupatenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>
          }
          findMany: {
            args: Prisma.KabupatenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>[]
          }
          create: {
            args: Prisma.KabupatenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>
          }
          createMany: {
            args: Prisma.KabupatenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KabupatenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>
          }
          update: {
            args: Prisma.KabupatenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>
          }
          deleteMany: {
            args: Prisma.KabupatenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KabupatenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KabupatenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabupatenPayload>
          }
          aggregate: {
            args: Prisma.KabupatenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKabupaten>
          }
          groupBy: {
            args: Prisma.KabupatenGroupByArgs<ExtArgs>
            result: $Utils.Optional<KabupatenGroupByOutputType>[]
          }
          count: {
            args: Prisma.KabupatenCountArgs<ExtArgs>
            result: $Utils.Optional<KabupatenCountAggregateOutputType> | number
          }
        }
      }
      Provinsi: {
        payload: Prisma.$ProvinsiPayload<ExtArgs>
        fields: Prisma.ProvinsiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProvinsiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProvinsiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>
          }
          findFirst: {
            args: Prisma.ProvinsiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProvinsiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>
          }
          findMany: {
            args: Prisma.ProvinsiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>[]
          }
          create: {
            args: Prisma.ProvinsiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>
          }
          createMany: {
            args: Prisma.ProvinsiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProvinsiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>
          }
          update: {
            args: Prisma.ProvinsiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>
          }
          deleteMany: {
            args: Prisma.ProvinsiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProvinsiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProvinsiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvinsiPayload>
          }
          aggregate: {
            args: Prisma.ProvinsiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvinsi>
          }
          groupBy: {
            args: Prisma.ProvinsiGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProvinsiGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProvinsiCountArgs<ExtArgs>
            result: $Utils.Optional<ProvinsiCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type KecamatanCountOutputType
   */

  export type KecamatanCountOutputType = {
    dataPenerimaBantuans: number
  }

  export type KecamatanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataPenerimaBantuans?: boolean | KecamatanCountOutputTypeCountDataPenerimaBantuansArgs
  }

  // Custom InputTypes
  /**
   * KecamatanCountOutputType without action
   */
  export type KecamatanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KecamatanCountOutputType
     */
    select?: KecamatanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KecamatanCountOutputType without action
   */
  export type KecamatanCountOutputTypeCountDataPenerimaBantuansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataPenerimaBantuanWhereInput
  }


  /**
   * Count Type KabupatenCountOutputType
   */

  export type KabupatenCountOutputType = {
    dataPenerimaBantuans: number
    kecamatan: number
  }

  export type KabupatenCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataPenerimaBantuans?: boolean | KabupatenCountOutputTypeCountDataPenerimaBantuansArgs
    kecamatan?: boolean | KabupatenCountOutputTypeCountKecamatanArgs
  }

  // Custom InputTypes
  /**
   * KabupatenCountOutputType without action
   */
  export type KabupatenCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabupatenCountOutputType
     */
    select?: KabupatenCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KabupatenCountOutputType without action
   */
  export type KabupatenCountOutputTypeCountDataPenerimaBantuansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataPenerimaBantuanWhereInput
  }

  /**
   * KabupatenCountOutputType without action
   */
  export type KabupatenCountOutputTypeCountKecamatanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: kecamatanWhereInput
  }


  /**
   * Count Type ProvinsiCountOutputType
   */

  export type ProvinsiCountOutputType = {
    dataPenerimaBantuans: number
    kabupaten: number
  }

  export type ProvinsiCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataPenerimaBantuans?: boolean | ProvinsiCountOutputTypeCountDataPenerimaBantuansArgs
    kabupaten?: boolean | ProvinsiCountOutputTypeCountKabupatenArgs
  }

  // Custom InputTypes
  /**
   * ProvinsiCountOutputType without action
   */
  export type ProvinsiCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvinsiCountOutputType
     */
    select?: ProvinsiCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProvinsiCountOutputType without action
   */
  export type ProvinsiCountOutputTypeCountDataPenerimaBantuansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataPenerimaBantuanWhereInput
  }

  /**
   * ProvinsiCountOutputType without action
   */
  export type ProvinsiCountOutputTypeCountKabupatenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KabupatenWhereInput
  }


  /**
   * Models
   */

  /**
   * Model DataPenerimaBantuan
   */

  export type AggregateDataPenerimaBantuan = {
    _count: DataPenerimaBantuanCountAggregateOutputType | null
    _avg: DataPenerimaBantuanAvgAggregateOutputType | null
    _sum: DataPenerimaBantuanSumAggregateOutputType | null
    _min: DataPenerimaBantuanMinAggregateOutputType | null
    _max: DataPenerimaBantuanMaxAggregateOutputType | null
  }

  export type DataPenerimaBantuanAvgAggregateOutputType = {
    id: number | null
    jumlahPenerima: number | null
  }

  export type DataPenerimaBantuanSumAggregateOutputType = {
    id: number | null
    jumlahPenerima: number | null
  }

  export type DataPenerimaBantuanMinAggregateOutputType = {
    id: number | null
    namaProgram: string | null
    jumlahPenerima: number | null
    tanggalPenyaluran: Date | null
    provinsiId: string | null
    kecamatanId: string | null
    kabupatenId: string | null
    catatanTambahan: string | null
    urlBuktiPenyaluran: string | null
    status: $Enums.status | null
    email: string | null
  }

  export type DataPenerimaBantuanMaxAggregateOutputType = {
    id: number | null
    namaProgram: string | null
    jumlahPenerima: number | null
    tanggalPenyaluran: Date | null
    provinsiId: string | null
    kecamatanId: string | null
    kabupatenId: string | null
    catatanTambahan: string | null
    urlBuktiPenyaluran: string | null
    status: $Enums.status | null
    email: string | null
  }

  export type DataPenerimaBantuanCountAggregateOutputType = {
    id: number
    namaProgram: number
    jumlahPenerima: number
    tanggalPenyaluran: number
    provinsiId: number
    kecamatanId: number
    kabupatenId: number
    catatanTambahan: number
    urlBuktiPenyaluran: number
    status: number
    email: number
    _all: number
  }


  export type DataPenerimaBantuanAvgAggregateInputType = {
    id?: true
    jumlahPenerima?: true
  }

  export type DataPenerimaBantuanSumAggregateInputType = {
    id?: true
    jumlahPenerima?: true
  }

  export type DataPenerimaBantuanMinAggregateInputType = {
    id?: true
    namaProgram?: true
    jumlahPenerima?: true
    tanggalPenyaluran?: true
    provinsiId?: true
    kecamatanId?: true
    kabupatenId?: true
    catatanTambahan?: true
    urlBuktiPenyaluran?: true
    status?: true
    email?: true
  }

  export type DataPenerimaBantuanMaxAggregateInputType = {
    id?: true
    namaProgram?: true
    jumlahPenerima?: true
    tanggalPenyaluran?: true
    provinsiId?: true
    kecamatanId?: true
    kabupatenId?: true
    catatanTambahan?: true
    urlBuktiPenyaluran?: true
    status?: true
    email?: true
  }

  export type DataPenerimaBantuanCountAggregateInputType = {
    id?: true
    namaProgram?: true
    jumlahPenerima?: true
    tanggalPenyaluran?: true
    provinsiId?: true
    kecamatanId?: true
    kabupatenId?: true
    catatanTambahan?: true
    urlBuktiPenyaluran?: true
    status?: true
    email?: true
    _all?: true
  }

  export type DataPenerimaBantuanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataPenerimaBantuan to aggregate.
     */
    where?: DataPenerimaBantuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataPenerimaBantuans to fetch.
     */
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataPenerimaBantuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataPenerimaBantuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataPenerimaBantuans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataPenerimaBantuans
    **/
    _count?: true | DataPenerimaBantuanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DataPenerimaBantuanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DataPenerimaBantuanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataPenerimaBantuanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataPenerimaBantuanMaxAggregateInputType
  }

  export type GetDataPenerimaBantuanAggregateType<T extends DataPenerimaBantuanAggregateArgs> = {
        [P in keyof T & keyof AggregateDataPenerimaBantuan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataPenerimaBantuan[P]>
      : GetScalarType<T[P], AggregateDataPenerimaBantuan[P]>
  }




  export type DataPenerimaBantuanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataPenerimaBantuanWhereInput
    orderBy?: DataPenerimaBantuanOrderByWithAggregationInput | DataPenerimaBantuanOrderByWithAggregationInput[]
    by: DataPenerimaBantuanScalarFieldEnum[] | DataPenerimaBantuanScalarFieldEnum
    having?: DataPenerimaBantuanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataPenerimaBantuanCountAggregateInputType | true
    _avg?: DataPenerimaBantuanAvgAggregateInputType
    _sum?: DataPenerimaBantuanSumAggregateInputType
    _min?: DataPenerimaBantuanMinAggregateInputType
    _max?: DataPenerimaBantuanMaxAggregateInputType
  }

  export type DataPenerimaBantuanGroupByOutputType = {
    id: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date
    provinsiId: string
    kecamatanId: string
    kabupatenId: string
    catatanTambahan: string | null
    urlBuktiPenyaluran: string
    status: $Enums.status
    email: string
    _count: DataPenerimaBantuanCountAggregateOutputType | null
    _avg: DataPenerimaBantuanAvgAggregateOutputType | null
    _sum: DataPenerimaBantuanSumAggregateOutputType | null
    _min: DataPenerimaBantuanMinAggregateOutputType | null
    _max: DataPenerimaBantuanMaxAggregateOutputType | null
  }

  type GetDataPenerimaBantuanGroupByPayload<T extends DataPenerimaBantuanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataPenerimaBantuanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataPenerimaBantuanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataPenerimaBantuanGroupByOutputType[P]>
            : GetScalarType<T[P], DataPenerimaBantuanGroupByOutputType[P]>
        }
      >
    >


  export type DataPenerimaBantuanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    namaProgram?: boolean
    jumlahPenerima?: boolean
    tanggalPenyaluran?: boolean
    provinsiId?: boolean
    kecamatanId?: boolean
    kabupatenId?: boolean
    catatanTambahan?: boolean
    urlBuktiPenyaluran?: boolean
    status?: boolean
    email?: boolean
    kecamatan?: boolean | kecamatanDefaultArgs<ExtArgs>
    kabupaten?: boolean | KabupatenDefaultArgs<ExtArgs>
    provinsi?: boolean | ProvinsiDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataPenerimaBantuan"]>


  export type DataPenerimaBantuanSelectScalar = {
    id?: boolean
    namaProgram?: boolean
    jumlahPenerima?: boolean
    tanggalPenyaluran?: boolean
    provinsiId?: boolean
    kecamatanId?: boolean
    kabupatenId?: boolean
    catatanTambahan?: boolean
    urlBuktiPenyaluran?: boolean
    status?: boolean
    email?: boolean
  }

  export type DataPenerimaBantuanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kecamatan?: boolean | kecamatanDefaultArgs<ExtArgs>
    kabupaten?: boolean | KabupatenDefaultArgs<ExtArgs>
    provinsi?: boolean | ProvinsiDefaultArgs<ExtArgs>
  }

  export type $DataPenerimaBantuanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataPenerimaBantuan"
    objects: {
      kecamatan: Prisma.$kecamatanPayload<ExtArgs>
      kabupaten: Prisma.$KabupatenPayload<ExtArgs>
      provinsi: Prisma.$ProvinsiPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      namaProgram: string
      jumlahPenerima: number
      tanggalPenyaluran: Date
      provinsiId: string
      kecamatanId: string
      kabupatenId: string
      catatanTambahan: string | null
      urlBuktiPenyaluran: string
      status: $Enums.status
      email: string
    }, ExtArgs["result"]["dataPenerimaBantuan"]>
    composites: {}
  }

  type DataPenerimaBantuanGetPayload<S extends boolean | null | undefined | DataPenerimaBantuanDefaultArgs> = $Result.GetResult<Prisma.$DataPenerimaBantuanPayload, S>

  type DataPenerimaBantuanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DataPenerimaBantuanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DataPenerimaBantuanCountAggregateInputType | true
    }

  export interface DataPenerimaBantuanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataPenerimaBantuan'], meta: { name: 'DataPenerimaBantuan' } }
    /**
     * Find zero or one DataPenerimaBantuan that matches the filter.
     * @param {DataPenerimaBantuanFindUniqueArgs} args - Arguments to find a DataPenerimaBantuan
     * @example
     * // Get one DataPenerimaBantuan
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataPenerimaBantuanFindUniqueArgs>(args: SelectSubset<T, DataPenerimaBantuanFindUniqueArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DataPenerimaBantuan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DataPenerimaBantuanFindUniqueOrThrowArgs} args - Arguments to find a DataPenerimaBantuan
     * @example
     * // Get one DataPenerimaBantuan
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataPenerimaBantuanFindUniqueOrThrowArgs>(args: SelectSubset<T, DataPenerimaBantuanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DataPenerimaBantuan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanFindFirstArgs} args - Arguments to find a DataPenerimaBantuan
     * @example
     * // Get one DataPenerimaBantuan
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataPenerimaBantuanFindFirstArgs>(args?: SelectSubset<T, DataPenerimaBantuanFindFirstArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DataPenerimaBantuan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanFindFirstOrThrowArgs} args - Arguments to find a DataPenerimaBantuan
     * @example
     * // Get one DataPenerimaBantuan
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataPenerimaBantuanFindFirstOrThrowArgs>(args?: SelectSubset<T, DataPenerimaBantuanFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DataPenerimaBantuans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataPenerimaBantuans
     * const dataPenerimaBantuans = await prisma.dataPenerimaBantuan.findMany()
     * 
     * // Get first 10 DataPenerimaBantuans
     * const dataPenerimaBantuans = await prisma.dataPenerimaBantuan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataPenerimaBantuanWithIdOnly = await prisma.dataPenerimaBantuan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataPenerimaBantuanFindManyArgs>(args?: SelectSubset<T, DataPenerimaBantuanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DataPenerimaBantuan.
     * @param {DataPenerimaBantuanCreateArgs} args - Arguments to create a DataPenerimaBantuan.
     * @example
     * // Create one DataPenerimaBantuan
     * const DataPenerimaBantuan = await prisma.dataPenerimaBantuan.create({
     *   data: {
     *     // ... data to create a DataPenerimaBantuan
     *   }
     * })
     * 
     */
    create<T extends DataPenerimaBantuanCreateArgs>(args: SelectSubset<T, DataPenerimaBantuanCreateArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DataPenerimaBantuans.
     * @param {DataPenerimaBantuanCreateManyArgs} args - Arguments to create many DataPenerimaBantuans.
     * @example
     * // Create many DataPenerimaBantuans
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataPenerimaBantuanCreateManyArgs>(args?: SelectSubset<T, DataPenerimaBantuanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DataPenerimaBantuan.
     * @param {DataPenerimaBantuanDeleteArgs} args - Arguments to delete one DataPenerimaBantuan.
     * @example
     * // Delete one DataPenerimaBantuan
     * const DataPenerimaBantuan = await prisma.dataPenerimaBantuan.delete({
     *   where: {
     *     // ... filter to delete one DataPenerimaBantuan
     *   }
     * })
     * 
     */
    delete<T extends DataPenerimaBantuanDeleteArgs>(args: SelectSubset<T, DataPenerimaBantuanDeleteArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DataPenerimaBantuan.
     * @param {DataPenerimaBantuanUpdateArgs} args - Arguments to update one DataPenerimaBantuan.
     * @example
     * // Update one DataPenerimaBantuan
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataPenerimaBantuanUpdateArgs>(args: SelectSubset<T, DataPenerimaBantuanUpdateArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DataPenerimaBantuans.
     * @param {DataPenerimaBantuanDeleteManyArgs} args - Arguments to filter DataPenerimaBantuans to delete.
     * @example
     * // Delete a few DataPenerimaBantuans
     * const { count } = await prisma.dataPenerimaBantuan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataPenerimaBantuanDeleteManyArgs>(args?: SelectSubset<T, DataPenerimaBantuanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataPenerimaBantuans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataPenerimaBantuans
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataPenerimaBantuanUpdateManyArgs>(args: SelectSubset<T, DataPenerimaBantuanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DataPenerimaBantuan.
     * @param {DataPenerimaBantuanUpsertArgs} args - Arguments to update or create a DataPenerimaBantuan.
     * @example
     * // Update or create a DataPenerimaBantuan
     * const dataPenerimaBantuan = await prisma.dataPenerimaBantuan.upsert({
     *   create: {
     *     // ... data to create a DataPenerimaBantuan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataPenerimaBantuan we want to update
     *   }
     * })
     */
    upsert<T extends DataPenerimaBantuanUpsertArgs>(args: SelectSubset<T, DataPenerimaBantuanUpsertArgs<ExtArgs>>): Prisma__DataPenerimaBantuanClient<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DataPenerimaBantuans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanCountArgs} args - Arguments to filter DataPenerimaBantuans to count.
     * @example
     * // Count the number of DataPenerimaBantuans
     * const count = await prisma.dataPenerimaBantuan.count({
     *   where: {
     *     // ... the filter for the DataPenerimaBantuans we want to count
     *   }
     * })
    **/
    count<T extends DataPenerimaBantuanCountArgs>(
      args?: Subset<T, DataPenerimaBantuanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataPenerimaBantuanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataPenerimaBantuan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataPenerimaBantuanAggregateArgs>(args: Subset<T, DataPenerimaBantuanAggregateArgs>): Prisma.PrismaPromise<GetDataPenerimaBantuanAggregateType<T>>

    /**
     * Group by DataPenerimaBantuan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataPenerimaBantuanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataPenerimaBantuanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataPenerimaBantuanGroupByArgs['orderBy'] }
        : { orderBy?: DataPenerimaBantuanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataPenerimaBantuanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataPenerimaBantuanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataPenerimaBantuan model
   */
  readonly fields: DataPenerimaBantuanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataPenerimaBantuan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataPenerimaBantuanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kecamatan<T extends kecamatanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, kecamatanDefaultArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    kabupaten<T extends KabupatenDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KabupatenDefaultArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    provinsi<T extends ProvinsiDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProvinsiDefaultArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataPenerimaBantuan model
   */ 
  interface DataPenerimaBantuanFieldRefs {
    readonly id: FieldRef<"DataPenerimaBantuan", 'Int'>
    readonly namaProgram: FieldRef<"DataPenerimaBantuan", 'String'>
    readonly jumlahPenerima: FieldRef<"DataPenerimaBantuan", 'Int'>
    readonly tanggalPenyaluran: FieldRef<"DataPenerimaBantuan", 'DateTime'>
    readonly provinsiId: FieldRef<"DataPenerimaBantuan", 'String'>
    readonly kecamatanId: FieldRef<"DataPenerimaBantuan", 'String'>
    readonly kabupatenId: FieldRef<"DataPenerimaBantuan", 'String'>
    readonly catatanTambahan: FieldRef<"DataPenerimaBantuan", 'String'>
    readonly urlBuktiPenyaluran: FieldRef<"DataPenerimaBantuan", 'String'>
    readonly status: FieldRef<"DataPenerimaBantuan", 'status'>
    readonly email: FieldRef<"DataPenerimaBantuan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DataPenerimaBantuan findUnique
   */
  export type DataPenerimaBantuanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * Filter, which DataPenerimaBantuan to fetch.
     */
    where: DataPenerimaBantuanWhereUniqueInput
  }

  /**
   * DataPenerimaBantuan findUniqueOrThrow
   */
  export type DataPenerimaBantuanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * Filter, which DataPenerimaBantuan to fetch.
     */
    where: DataPenerimaBantuanWhereUniqueInput
  }

  /**
   * DataPenerimaBantuan findFirst
   */
  export type DataPenerimaBantuanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * Filter, which DataPenerimaBantuan to fetch.
     */
    where?: DataPenerimaBantuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataPenerimaBantuans to fetch.
     */
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataPenerimaBantuans.
     */
    cursor?: DataPenerimaBantuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataPenerimaBantuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataPenerimaBantuans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataPenerimaBantuans.
     */
    distinct?: DataPenerimaBantuanScalarFieldEnum | DataPenerimaBantuanScalarFieldEnum[]
  }

  /**
   * DataPenerimaBantuan findFirstOrThrow
   */
  export type DataPenerimaBantuanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * Filter, which DataPenerimaBantuan to fetch.
     */
    where?: DataPenerimaBantuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataPenerimaBantuans to fetch.
     */
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataPenerimaBantuans.
     */
    cursor?: DataPenerimaBantuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataPenerimaBantuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataPenerimaBantuans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataPenerimaBantuans.
     */
    distinct?: DataPenerimaBantuanScalarFieldEnum | DataPenerimaBantuanScalarFieldEnum[]
  }

  /**
   * DataPenerimaBantuan findMany
   */
  export type DataPenerimaBantuanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * Filter, which DataPenerimaBantuans to fetch.
     */
    where?: DataPenerimaBantuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataPenerimaBantuans to fetch.
     */
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataPenerimaBantuans.
     */
    cursor?: DataPenerimaBantuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataPenerimaBantuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataPenerimaBantuans.
     */
    skip?: number
    distinct?: DataPenerimaBantuanScalarFieldEnum | DataPenerimaBantuanScalarFieldEnum[]
  }

  /**
   * DataPenerimaBantuan create
   */
  export type DataPenerimaBantuanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * The data needed to create a DataPenerimaBantuan.
     */
    data: XOR<DataPenerimaBantuanCreateInput, DataPenerimaBantuanUncheckedCreateInput>
  }

  /**
   * DataPenerimaBantuan createMany
   */
  export type DataPenerimaBantuanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataPenerimaBantuans.
     */
    data: DataPenerimaBantuanCreateManyInput | DataPenerimaBantuanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataPenerimaBantuan update
   */
  export type DataPenerimaBantuanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * The data needed to update a DataPenerimaBantuan.
     */
    data: XOR<DataPenerimaBantuanUpdateInput, DataPenerimaBantuanUncheckedUpdateInput>
    /**
     * Choose, which DataPenerimaBantuan to update.
     */
    where: DataPenerimaBantuanWhereUniqueInput
  }

  /**
   * DataPenerimaBantuan updateMany
   */
  export type DataPenerimaBantuanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataPenerimaBantuans.
     */
    data: XOR<DataPenerimaBantuanUpdateManyMutationInput, DataPenerimaBantuanUncheckedUpdateManyInput>
    /**
     * Filter which DataPenerimaBantuans to update
     */
    where?: DataPenerimaBantuanWhereInput
  }

  /**
   * DataPenerimaBantuan upsert
   */
  export type DataPenerimaBantuanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * The filter to search for the DataPenerimaBantuan to update in case it exists.
     */
    where: DataPenerimaBantuanWhereUniqueInput
    /**
     * In case the DataPenerimaBantuan found by the `where` argument doesn't exist, create a new DataPenerimaBantuan with this data.
     */
    create: XOR<DataPenerimaBantuanCreateInput, DataPenerimaBantuanUncheckedCreateInput>
    /**
     * In case the DataPenerimaBantuan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataPenerimaBantuanUpdateInput, DataPenerimaBantuanUncheckedUpdateInput>
  }

  /**
   * DataPenerimaBantuan delete
   */
  export type DataPenerimaBantuanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    /**
     * Filter which DataPenerimaBantuan to delete.
     */
    where: DataPenerimaBantuanWhereUniqueInput
  }

  /**
   * DataPenerimaBantuan deleteMany
   */
  export type DataPenerimaBantuanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataPenerimaBantuans to delete
     */
    where?: DataPenerimaBantuanWhereInput
  }

  /**
   * DataPenerimaBantuan without action
   */
  export type DataPenerimaBantuanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
  }


  /**
   * Model kecamatan
   */

  export type AggregateKecamatan = {
    _count: KecamatanCountAggregateOutputType | null
    _min: KecamatanMinAggregateOutputType | null
    _max: KecamatanMaxAggregateOutputType | null
  }

  export type KecamatanMinAggregateOutputType = {
    id: string | null
    namaKecamatan: string | null
    kabupatenId: string | null
  }

  export type KecamatanMaxAggregateOutputType = {
    id: string | null
    namaKecamatan: string | null
    kabupatenId: string | null
  }

  export type KecamatanCountAggregateOutputType = {
    id: number
    namaKecamatan: number
    kabupatenId: number
    _all: number
  }


  export type KecamatanMinAggregateInputType = {
    id?: true
    namaKecamatan?: true
    kabupatenId?: true
  }

  export type KecamatanMaxAggregateInputType = {
    id?: true
    namaKecamatan?: true
    kabupatenId?: true
  }

  export type KecamatanCountAggregateInputType = {
    id?: true
    namaKecamatan?: true
    kabupatenId?: true
    _all?: true
  }

  export type KecamatanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which kecamatan to aggregate.
     */
    where?: kecamatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kecamatans to fetch.
     */
    orderBy?: kecamatanOrderByWithRelationInput | kecamatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: kecamatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kecamatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kecamatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kecamatans
    **/
    _count?: true | KecamatanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KecamatanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KecamatanMaxAggregateInputType
  }

  export type GetKecamatanAggregateType<T extends KecamatanAggregateArgs> = {
        [P in keyof T & keyof AggregateKecamatan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKecamatan[P]>
      : GetScalarType<T[P], AggregateKecamatan[P]>
  }




  export type kecamatanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: kecamatanWhereInput
    orderBy?: kecamatanOrderByWithAggregationInput | kecamatanOrderByWithAggregationInput[]
    by: KecamatanScalarFieldEnum[] | KecamatanScalarFieldEnum
    having?: kecamatanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KecamatanCountAggregateInputType | true
    _min?: KecamatanMinAggregateInputType
    _max?: KecamatanMaxAggregateInputType
  }

  export type KecamatanGroupByOutputType = {
    id: string
    namaKecamatan: string
    kabupatenId: string
    _count: KecamatanCountAggregateOutputType | null
    _min: KecamatanMinAggregateOutputType | null
    _max: KecamatanMaxAggregateOutputType | null
  }

  type GetKecamatanGroupByPayload<T extends kecamatanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KecamatanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KecamatanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KecamatanGroupByOutputType[P]>
            : GetScalarType<T[P], KecamatanGroupByOutputType[P]>
        }
      >
    >


  export type kecamatanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    namaKecamatan?: boolean
    kabupatenId?: boolean
    dataPenerimaBantuans?: boolean | kecamatan$dataPenerimaBantuansArgs<ExtArgs>
    kabupaten?: boolean | KabupatenDefaultArgs<ExtArgs>
    _count?: boolean | KecamatanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kecamatan"]>


  export type kecamatanSelectScalar = {
    id?: boolean
    namaKecamatan?: boolean
    kabupatenId?: boolean
  }

  export type kecamatanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataPenerimaBantuans?: boolean | kecamatan$dataPenerimaBantuansArgs<ExtArgs>
    kabupaten?: boolean | KabupatenDefaultArgs<ExtArgs>
    _count?: boolean | KecamatanCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $kecamatanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "kecamatan"
    objects: {
      dataPenerimaBantuans: Prisma.$DataPenerimaBantuanPayload<ExtArgs>[]
      kabupaten: Prisma.$KabupatenPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      namaKecamatan: string
      kabupatenId: string
    }, ExtArgs["result"]["kecamatan"]>
    composites: {}
  }

  type kecamatanGetPayload<S extends boolean | null | undefined | kecamatanDefaultArgs> = $Result.GetResult<Prisma.$kecamatanPayload, S>

  type kecamatanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<kecamatanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KecamatanCountAggregateInputType | true
    }

  export interface kecamatanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['kecamatan'], meta: { name: 'kecamatan' } }
    /**
     * Find zero or one Kecamatan that matches the filter.
     * @param {kecamatanFindUniqueArgs} args - Arguments to find a Kecamatan
     * @example
     * // Get one Kecamatan
     * const kecamatan = await prisma.kecamatan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends kecamatanFindUniqueArgs>(args: SelectSubset<T, kecamatanFindUniqueArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kecamatan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {kecamatanFindUniqueOrThrowArgs} args - Arguments to find a Kecamatan
     * @example
     * // Get one Kecamatan
     * const kecamatan = await prisma.kecamatan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends kecamatanFindUniqueOrThrowArgs>(args: SelectSubset<T, kecamatanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kecamatan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kecamatanFindFirstArgs} args - Arguments to find a Kecamatan
     * @example
     * // Get one Kecamatan
     * const kecamatan = await prisma.kecamatan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends kecamatanFindFirstArgs>(args?: SelectSubset<T, kecamatanFindFirstArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kecamatan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kecamatanFindFirstOrThrowArgs} args - Arguments to find a Kecamatan
     * @example
     * // Get one Kecamatan
     * const kecamatan = await prisma.kecamatan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends kecamatanFindFirstOrThrowArgs>(args?: SelectSubset<T, kecamatanFindFirstOrThrowArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kecamatans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kecamatanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kecamatans
     * const kecamatans = await prisma.kecamatan.findMany()
     * 
     * // Get first 10 Kecamatans
     * const kecamatans = await prisma.kecamatan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kecamatanWithIdOnly = await prisma.kecamatan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends kecamatanFindManyArgs>(args?: SelectSubset<T, kecamatanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kecamatan.
     * @param {kecamatanCreateArgs} args - Arguments to create a Kecamatan.
     * @example
     * // Create one Kecamatan
     * const Kecamatan = await prisma.kecamatan.create({
     *   data: {
     *     // ... data to create a Kecamatan
     *   }
     * })
     * 
     */
    create<T extends kecamatanCreateArgs>(args: SelectSubset<T, kecamatanCreateArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kecamatans.
     * @param {kecamatanCreateManyArgs} args - Arguments to create many Kecamatans.
     * @example
     * // Create many Kecamatans
     * const kecamatan = await prisma.kecamatan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends kecamatanCreateManyArgs>(args?: SelectSubset<T, kecamatanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kecamatan.
     * @param {kecamatanDeleteArgs} args - Arguments to delete one Kecamatan.
     * @example
     * // Delete one Kecamatan
     * const Kecamatan = await prisma.kecamatan.delete({
     *   where: {
     *     // ... filter to delete one Kecamatan
     *   }
     * })
     * 
     */
    delete<T extends kecamatanDeleteArgs>(args: SelectSubset<T, kecamatanDeleteArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kecamatan.
     * @param {kecamatanUpdateArgs} args - Arguments to update one Kecamatan.
     * @example
     * // Update one Kecamatan
     * const kecamatan = await prisma.kecamatan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends kecamatanUpdateArgs>(args: SelectSubset<T, kecamatanUpdateArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kecamatans.
     * @param {kecamatanDeleteManyArgs} args - Arguments to filter Kecamatans to delete.
     * @example
     * // Delete a few Kecamatans
     * const { count } = await prisma.kecamatan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends kecamatanDeleteManyArgs>(args?: SelectSubset<T, kecamatanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kecamatans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kecamatanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kecamatans
     * const kecamatan = await prisma.kecamatan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends kecamatanUpdateManyArgs>(args: SelectSubset<T, kecamatanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kecamatan.
     * @param {kecamatanUpsertArgs} args - Arguments to update or create a Kecamatan.
     * @example
     * // Update or create a Kecamatan
     * const kecamatan = await prisma.kecamatan.upsert({
     *   create: {
     *     // ... data to create a Kecamatan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kecamatan we want to update
     *   }
     * })
     */
    upsert<T extends kecamatanUpsertArgs>(args: SelectSubset<T, kecamatanUpsertArgs<ExtArgs>>): Prisma__kecamatanClient<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kecamatans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kecamatanCountArgs} args - Arguments to filter Kecamatans to count.
     * @example
     * // Count the number of Kecamatans
     * const count = await prisma.kecamatan.count({
     *   where: {
     *     // ... the filter for the Kecamatans we want to count
     *   }
     * })
    **/
    count<T extends kecamatanCountArgs>(
      args?: Subset<T, kecamatanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KecamatanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kecamatan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KecamatanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KecamatanAggregateArgs>(args: Subset<T, KecamatanAggregateArgs>): Prisma.PrismaPromise<GetKecamatanAggregateType<T>>

    /**
     * Group by Kecamatan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kecamatanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends kecamatanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: kecamatanGroupByArgs['orderBy'] }
        : { orderBy?: kecamatanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, kecamatanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKecamatanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the kecamatan model
   */
  readonly fields: kecamatanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for kecamatan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__kecamatanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dataPenerimaBantuans<T extends kecamatan$dataPenerimaBantuansArgs<ExtArgs> = {}>(args?: Subset<T, kecamatan$dataPenerimaBantuansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findMany"> | Null>
    kabupaten<T extends KabupatenDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KabupatenDefaultArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the kecamatan model
   */ 
  interface kecamatanFieldRefs {
    readonly id: FieldRef<"kecamatan", 'String'>
    readonly namaKecamatan: FieldRef<"kecamatan", 'String'>
    readonly kabupatenId: FieldRef<"kecamatan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * kecamatan findUnique
   */
  export type kecamatanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * Filter, which kecamatan to fetch.
     */
    where: kecamatanWhereUniqueInput
  }

  /**
   * kecamatan findUniqueOrThrow
   */
  export type kecamatanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * Filter, which kecamatan to fetch.
     */
    where: kecamatanWhereUniqueInput
  }

  /**
   * kecamatan findFirst
   */
  export type kecamatanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * Filter, which kecamatan to fetch.
     */
    where?: kecamatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kecamatans to fetch.
     */
    orderBy?: kecamatanOrderByWithRelationInput | kecamatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kecamatans.
     */
    cursor?: kecamatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kecamatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kecamatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kecamatans.
     */
    distinct?: KecamatanScalarFieldEnum | KecamatanScalarFieldEnum[]
  }

  /**
   * kecamatan findFirstOrThrow
   */
  export type kecamatanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * Filter, which kecamatan to fetch.
     */
    where?: kecamatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kecamatans to fetch.
     */
    orderBy?: kecamatanOrderByWithRelationInput | kecamatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kecamatans.
     */
    cursor?: kecamatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kecamatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kecamatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kecamatans.
     */
    distinct?: KecamatanScalarFieldEnum | KecamatanScalarFieldEnum[]
  }

  /**
   * kecamatan findMany
   */
  export type kecamatanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * Filter, which kecamatans to fetch.
     */
    where?: kecamatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kecamatans to fetch.
     */
    orderBy?: kecamatanOrderByWithRelationInput | kecamatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kecamatans.
     */
    cursor?: kecamatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kecamatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kecamatans.
     */
    skip?: number
    distinct?: KecamatanScalarFieldEnum | KecamatanScalarFieldEnum[]
  }

  /**
   * kecamatan create
   */
  export type kecamatanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * The data needed to create a kecamatan.
     */
    data: XOR<kecamatanCreateInput, kecamatanUncheckedCreateInput>
  }

  /**
   * kecamatan createMany
   */
  export type kecamatanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many kecamatans.
     */
    data: kecamatanCreateManyInput | kecamatanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * kecamatan update
   */
  export type kecamatanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * The data needed to update a kecamatan.
     */
    data: XOR<kecamatanUpdateInput, kecamatanUncheckedUpdateInput>
    /**
     * Choose, which kecamatan to update.
     */
    where: kecamatanWhereUniqueInput
  }

  /**
   * kecamatan updateMany
   */
  export type kecamatanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update kecamatans.
     */
    data: XOR<kecamatanUpdateManyMutationInput, kecamatanUncheckedUpdateManyInput>
    /**
     * Filter which kecamatans to update
     */
    where?: kecamatanWhereInput
  }

  /**
   * kecamatan upsert
   */
  export type kecamatanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * The filter to search for the kecamatan to update in case it exists.
     */
    where: kecamatanWhereUniqueInput
    /**
     * In case the kecamatan found by the `where` argument doesn't exist, create a new kecamatan with this data.
     */
    create: XOR<kecamatanCreateInput, kecamatanUncheckedCreateInput>
    /**
     * In case the kecamatan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<kecamatanUpdateInput, kecamatanUncheckedUpdateInput>
  }

  /**
   * kecamatan delete
   */
  export type kecamatanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    /**
     * Filter which kecamatan to delete.
     */
    where: kecamatanWhereUniqueInput
  }

  /**
   * kecamatan deleteMany
   */
  export type kecamatanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which kecamatans to delete
     */
    where?: kecamatanWhereInput
  }

  /**
   * kecamatan.dataPenerimaBantuans
   */
  export type kecamatan$dataPenerimaBantuansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    where?: DataPenerimaBantuanWhereInput
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    cursor?: DataPenerimaBantuanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataPenerimaBantuanScalarFieldEnum | DataPenerimaBantuanScalarFieldEnum[]
  }

  /**
   * kecamatan without action
   */
  export type kecamatanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
  }


  /**
   * Model Kabupaten
   */

  export type AggregateKabupaten = {
    _count: KabupatenCountAggregateOutputType | null
    _min: KabupatenMinAggregateOutputType | null
    _max: KabupatenMaxAggregateOutputType | null
  }

  export type KabupatenMinAggregateOutputType = {
    id: string | null
    namaKabupaten: string | null
    provinsiId: string | null
  }

  export type KabupatenMaxAggregateOutputType = {
    id: string | null
    namaKabupaten: string | null
    provinsiId: string | null
  }

  export type KabupatenCountAggregateOutputType = {
    id: number
    namaKabupaten: number
    provinsiId: number
    _all: number
  }


  export type KabupatenMinAggregateInputType = {
    id?: true
    namaKabupaten?: true
    provinsiId?: true
  }

  export type KabupatenMaxAggregateInputType = {
    id?: true
    namaKabupaten?: true
    provinsiId?: true
  }

  export type KabupatenCountAggregateInputType = {
    id?: true
    namaKabupaten?: true
    provinsiId?: true
    _all?: true
  }

  export type KabupatenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kabupaten to aggregate.
     */
    where?: KabupatenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kabupatens to fetch.
     */
    orderBy?: KabupatenOrderByWithRelationInput | KabupatenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KabupatenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kabupatens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kabupatens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kabupatens
    **/
    _count?: true | KabupatenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KabupatenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KabupatenMaxAggregateInputType
  }

  export type GetKabupatenAggregateType<T extends KabupatenAggregateArgs> = {
        [P in keyof T & keyof AggregateKabupaten]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKabupaten[P]>
      : GetScalarType<T[P], AggregateKabupaten[P]>
  }




  export type KabupatenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KabupatenWhereInput
    orderBy?: KabupatenOrderByWithAggregationInput | KabupatenOrderByWithAggregationInput[]
    by: KabupatenScalarFieldEnum[] | KabupatenScalarFieldEnum
    having?: KabupatenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KabupatenCountAggregateInputType | true
    _min?: KabupatenMinAggregateInputType
    _max?: KabupatenMaxAggregateInputType
  }

  export type KabupatenGroupByOutputType = {
    id: string
    namaKabupaten: string
    provinsiId: string
    _count: KabupatenCountAggregateOutputType | null
    _min: KabupatenMinAggregateOutputType | null
    _max: KabupatenMaxAggregateOutputType | null
  }

  type GetKabupatenGroupByPayload<T extends KabupatenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KabupatenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KabupatenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KabupatenGroupByOutputType[P]>
            : GetScalarType<T[P], KabupatenGroupByOutputType[P]>
        }
      >
    >


  export type KabupatenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    namaKabupaten?: boolean
    provinsiId?: boolean
    provinsi?: boolean | ProvinsiDefaultArgs<ExtArgs>
    dataPenerimaBantuans?: boolean | Kabupaten$dataPenerimaBantuansArgs<ExtArgs>
    kecamatan?: boolean | Kabupaten$kecamatanArgs<ExtArgs>
    _count?: boolean | KabupatenCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kabupaten"]>


  export type KabupatenSelectScalar = {
    id?: boolean
    namaKabupaten?: boolean
    provinsiId?: boolean
  }

  export type KabupatenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provinsi?: boolean | ProvinsiDefaultArgs<ExtArgs>
    dataPenerimaBantuans?: boolean | Kabupaten$dataPenerimaBantuansArgs<ExtArgs>
    kecamatan?: boolean | Kabupaten$kecamatanArgs<ExtArgs>
    _count?: boolean | KabupatenCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $KabupatenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kabupaten"
    objects: {
      provinsi: Prisma.$ProvinsiPayload<ExtArgs>
      dataPenerimaBantuans: Prisma.$DataPenerimaBantuanPayload<ExtArgs>[]
      kecamatan: Prisma.$kecamatanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      namaKabupaten: string
      provinsiId: string
    }, ExtArgs["result"]["kabupaten"]>
    composites: {}
  }

  type KabupatenGetPayload<S extends boolean | null | undefined | KabupatenDefaultArgs> = $Result.GetResult<Prisma.$KabupatenPayload, S>

  type KabupatenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KabupatenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KabupatenCountAggregateInputType | true
    }

  export interface KabupatenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kabupaten'], meta: { name: 'Kabupaten' } }
    /**
     * Find zero or one Kabupaten that matches the filter.
     * @param {KabupatenFindUniqueArgs} args - Arguments to find a Kabupaten
     * @example
     * // Get one Kabupaten
     * const kabupaten = await prisma.kabupaten.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KabupatenFindUniqueArgs>(args: SelectSubset<T, KabupatenFindUniqueArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kabupaten that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KabupatenFindUniqueOrThrowArgs} args - Arguments to find a Kabupaten
     * @example
     * // Get one Kabupaten
     * const kabupaten = await prisma.kabupaten.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KabupatenFindUniqueOrThrowArgs>(args: SelectSubset<T, KabupatenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kabupaten that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenFindFirstArgs} args - Arguments to find a Kabupaten
     * @example
     * // Get one Kabupaten
     * const kabupaten = await prisma.kabupaten.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KabupatenFindFirstArgs>(args?: SelectSubset<T, KabupatenFindFirstArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kabupaten that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenFindFirstOrThrowArgs} args - Arguments to find a Kabupaten
     * @example
     * // Get one Kabupaten
     * const kabupaten = await prisma.kabupaten.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KabupatenFindFirstOrThrowArgs>(args?: SelectSubset<T, KabupatenFindFirstOrThrowArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kabupatens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kabupatens
     * const kabupatens = await prisma.kabupaten.findMany()
     * 
     * // Get first 10 Kabupatens
     * const kabupatens = await prisma.kabupaten.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kabupatenWithIdOnly = await prisma.kabupaten.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KabupatenFindManyArgs>(args?: SelectSubset<T, KabupatenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kabupaten.
     * @param {KabupatenCreateArgs} args - Arguments to create a Kabupaten.
     * @example
     * // Create one Kabupaten
     * const Kabupaten = await prisma.kabupaten.create({
     *   data: {
     *     // ... data to create a Kabupaten
     *   }
     * })
     * 
     */
    create<T extends KabupatenCreateArgs>(args: SelectSubset<T, KabupatenCreateArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kabupatens.
     * @param {KabupatenCreateManyArgs} args - Arguments to create many Kabupatens.
     * @example
     * // Create many Kabupatens
     * const kabupaten = await prisma.kabupaten.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KabupatenCreateManyArgs>(args?: SelectSubset<T, KabupatenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kabupaten.
     * @param {KabupatenDeleteArgs} args - Arguments to delete one Kabupaten.
     * @example
     * // Delete one Kabupaten
     * const Kabupaten = await prisma.kabupaten.delete({
     *   where: {
     *     // ... filter to delete one Kabupaten
     *   }
     * })
     * 
     */
    delete<T extends KabupatenDeleteArgs>(args: SelectSubset<T, KabupatenDeleteArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kabupaten.
     * @param {KabupatenUpdateArgs} args - Arguments to update one Kabupaten.
     * @example
     * // Update one Kabupaten
     * const kabupaten = await prisma.kabupaten.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KabupatenUpdateArgs>(args: SelectSubset<T, KabupatenUpdateArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kabupatens.
     * @param {KabupatenDeleteManyArgs} args - Arguments to filter Kabupatens to delete.
     * @example
     * // Delete a few Kabupatens
     * const { count } = await prisma.kabupaten.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KabupatenDeleteManyArgs>(args?: SelectSubset<T, KabupatenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kabupatens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kabupatens
     * const kabupaten = await prisma.kabupaten.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KabupatenUpdateManyArgs>(args: SelectSubset<T, KabupatenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kabupaten.
     * @param {KabupatenUpsertArgs} args - Arguments to update or create a Kabupaten.
     * @example
     * // Update or create a Kabupaten
     * const kabupaten = await prisma.kabupaten.upsert({
     *   create: {
     *     // ... data to create a Kabupaten
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kabupaten we want to update
     *   }
     * })
     */
    upsert<T extends KabupatenUpsertArgs>(args: SelectSubset<T, KabupatenUpsertArgs<ExtArgs>>): Prisma__KabupatenClient<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kabupatens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenCountArgs} args - Arguments to filter Kabupatens to count.
     * @example
     * // Count the number of Kabupatens
     * const count = await prisma.kabupaten.count({
     *   where: {
     *     // ... the filter for the Kabupatens we want to count
     *   }
     * })
    **/
    count<T extends KabupatenCountArgs>(
      args?: Subset<T, KabupatenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KabupatenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kabupaten.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KabupatenAggregateArgs>(args: Subset<T, KabupatenAggregateArgs>): Prisma.PrismaPromise<GetKabupatenAggregateType<T>>

    /**
     * Group by Kabupaten.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabupatenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KabupatenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KabupatenGroupByArgs['orderBy'] }
        : { orderBy?: KabupatenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KabupatenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKabupatenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kabupaten model
   */
  readonly fields: KabupatenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kabupaten.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KabupatenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provinsi<T extends ProvinsiDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProvinsiDefaultArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    dataPenerimaBantuans<T extends Kabupaten$dataPenerimaBantuansArgs<ExtArgs> = {}>(args?: Subset<T, Kabupaten$dataPenerimaBantuansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findMany"> | Null>
    kecamatan<T extends Kabupaten$kecamatanArgs<ExtArgs> = {}>(args?: Subset<T, Kabupaten$kecamatanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$kecamatanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kabupaten model
   */ 
  interface KabupatenFieldRefs {
    readonly id: FieldRef<"Kabupaten", 'String'>
    readonly namaKabupaten: FieldRef<"Kabupaten", 'String'>
    readonly provinsiId: FieldRef<"Kabupaten", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Kabupaten findUnique
   */
  export type KabupatenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * Filter, which Kabupaten to fetch.
     */
    where: KabupatenWhereUniqueInput
  }

  /**
   * Kabupaten findUniqueOrThrow
   */
  export type KabupatenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * Filter, which Kabupaten to fetch.
     */
    where: KabupatenWhereUniqueInput
  }

  /**
   * Kabupaten findFirst
   */
  export type KabupatenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * Filter, which Kabupaten to fetch.
     */
    where?: KabupatenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kabupatens to fetch.
     */
    orderBy?: KabupatenOrderByWithRelationInput | KabupatenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kabupatens.
     */
    cursor?: KabupatenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kabupatens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kabupatens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kabupatens.
     */
    distinct?: KabupatenScalarFieldEnum | KabupatenScalarFieldEnum[]
  }

  /**
   * Kabupaten findFirstOrThrow
   */
  export type KabupatenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * Filter, which Kabupaten to fetch.
     */
    where?: KabupatenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kabupatens to fetch.
     */
    orderBy?: KabupatenOrderByWithRelationInput | KabupatenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kabupatens.
     */
    cursor?: KabupatenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kabupatens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kabupatens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kabupatens.
     */
    distinct?: KabupatenScalarFieldEnum | KabupatenScalarFieldEnum[]
  }

  /**
   * Kabupaten findMany
   */
  export type KabupatenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * Filter, which Kabupatens to fetch.
     */
    where?: KabupatenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kabupatens to fetch.
     */
    orderBy?: KabupatenOrderByWithRelationInput | KabupatenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kabupatens.
     */
    cursor?: KabupatenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kabupatens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kabupatens.
     */
    skip?: number
    distinct?: KabupatenScalarFieldEnum | KabupatenScalarFieldEnum[]
  }

  /**
   * Kabupaten create
   */
  export type KabupatenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * The data needed to create a Kabupaten.
     */
    data: XOR<KabupatenCreateInput, KabupatenUncheckedCreateInput>
  }

  /**
   * Kabupaten createMany
   */
  export type KabupatenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kabupatens.
     */
    data: KabupatenCreateManyInput | KabupatenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kabupaten update
   */
  export type KabupatenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * The data needed to update a Kabupaten.
     */
    data: XOR<KabupatenUpdateInput, KabupatenUncheckedUpdateInput>
    /**
     * Choose, which Kabupaten to update.
     */
    where: KabupatenWhereUniqueInput
  }

  /**
   * Kabupaten updateMany
   */
  export type KabupatenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kabupatens.
     */
    data: XOR<KabupatenUpdateManyMutationInput, KabupatenUncheckedUpdateManyInput>
    /**
     * Filter which Kabupatens to update
     */
    where?: KabupatenWhereInput
  }

  /**
   * Kabupaten upsert
   */
  export type KabupatenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * The filter to search for the Kabupaten to update in case it exists.
     */
    where: KabupatenWhereUniqueInput
    /**
     * In case the Kabupaten found by the `where` argument doesn't exist, create a new Kabupaten with this data.
     */
    create: XOR<KabupatenCreateInput, KabupatenUncheckedCreateInput>
    /**
     * In case the Kabupaten was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KabupatenUpdateInput, KabupatenUncheckedUpdateInput>
  }

  /**
   * Kabupaten delete
   */
  export type KabupatenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    /**
     * Filter which Kabupaten to delete.
     */
    where: KabupatenWhereUniqueInput
  }

  /**
   * Kabupaten deleteMany
   */
  export type KabupatenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kabupatens to delete
     */
    where?: KabupatenWhereInput
  }

  /**
   * Kabupaten.dataPenerimaBantuans
   */
  export type Kabupaten$dataPenerimaBantuansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    where?: DataPenerimaBantuanWhereInput
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    cursor?: DataPenerimaBantuanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataPenerimaBantuanScalarFieldEnum | DataPenerimaBantuanScalarFieldEnum[]
  }

  /**
   * Kabupaten.kecamatan
   */
  export type Kabupaten$kecamatanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kecamatan
     */
    select?: kecamatanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kecamatanInclude<ExtArgs> | null
    where?: kecamatanWhereInput
    orderBy?: kecamatanOrderByWithRelationInput | kecamatanOrderByWithRelationInput[]
    cursor?: kecamatanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KecamatanScalarFieldEnum | KecamatanScalarFieldEnum[]
  }

  /**
   * Kabupaten without action
   */
  export type KabupatenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
  }


  /**
   * Model Provinsi
   */

  export type AggregateProvinsi = {
    _count: ProvinsiCountAggregateOutputType | null
    _min: ProvinsiMinAggregateOutputType | null
    _max: ProvinsiMaxAggregateOutputType | null
  }

  export type ProvinsiMinAggregateOutputType = {
    id: string | null
    namaProvinsi: string | null
  }

  export type ProvinsiMaxAggregateOutputType = {
    id: string | null
    namaProvinsi: string | null
  }

  export type ProvinsiCountAggregateOutputType = {
    id: number
    namaProvinsi: number
    _all: number
  }


  export type ProvinsiMinAggregateInputType = {
    id?: true
    namaProvinsi?: true
  }

  export type ProvinsiMaxAggregateInputType = {
    id?: true
    namaProvinsi?: true
  }

  export type ProvinsiCountAggregateInputType = {
    id?: true
    namaProvinsi?: true
    _all?: true
  }

  export type ProvinsiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provinsi to aggregate.
     */
    where?: ProvinsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinsis to fetch.
     */
    orderBy?: ProvinsiOrderByWithRelationInput | ProvinsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProvinsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinsis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Provinsis
    **/
    _count?: true | ProvinsiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProvinsiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProvinsiMaxAggregateInputType
  }

  export type GetProvinsiAggregateType<T extends ProvinsiAggregateArgs> = {
        [P in keyof T & keyof AggregateProvinsi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvinsi[P]>
      : GetScalarType<T[P], AggregateProvinsi[P]>
  }




  export type ProvinsiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProvinsiWhereInput
    orderBy?: ProvinsiOrderByWithAggregationInput | ProvinsiOrderByWithAggregationInput[]
    by: ProvinsiScalarFieldEnum[] | ProvinsiScalarFieldEnum
    having?: ProvinsiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProvinsiCountAggregateInputType | true
    _min?: ProvinsiMinAggregateInputType
    _max?: ProvinsiMaxAggregateInputType
  }

  export type ProvinsiGroupByOutputType = {
    id: string
    namaProvinsi: string
    _count: ProvinsiCountAggregateOutputType | null
    _min: ProvinsiMinAggregateOutputType | null
    _max: ProvinsiMaxAggregateOutputType | null
  }

  type GetProvinsiGroupByPayload<T extends ProvinsiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProvinsiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProvinsiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProvinsiGroupByOutputType[P]>
            : GetScalarType<T[P], ProvinsiGroupByOutputType[P]>
        }
      >
    >


  export type ProvinsiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    namaProvinsi?: boolean
    dataPenerimaBantuans?: boolean | Provinsi$dataPenerimaBantuansArgs<ExtArgs>
    kabupaten?: boolean | Provinsi$kabupatenArgs<ExtArgs>
    _count?: boolean | ProvinsiCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provinsi"]>


  export type ProvinsiSelectScalar = {
    id?: boolean
    namaProvinsi?: boolean
  }

  export type ProvinsiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataPenerimaBantuans?: boolean | Provinsi$dataPenerimaBantuansArgs<ExtArgs>
    kabupaten?: boolean | Provinsi$kabupatenArgs<ExtArgs>
    _count?: boolean | ProvinsiCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProvinsiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Provinsi"
    objects: {
      dataPenerimaBantuans: Prisma.$DataPenerimaBantuanPayload<ExtArgs>[]
      kabupaten: Prisma.$KabupatenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      namaProvinsi: string
    }, ExtArgs["result"]["provinsi"]>
    composites: {}
  }

  type ProvinsiGetPayload<S extends boolean | null | undefined | ProvinsiDefaultArgs> = $Result.GetResult<Prisma.$ProvinsiPayload, S>

  type ProvinsiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProvinsiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProvinsiCountAggregateInputType | true
    }

  export interface ProvinsiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Provinsi'], meta: { name: 'Provinsi' } }
    /**
     * Find zero or one Provinsi that matches the filter.
     * @param {ProvinsiFindUniqueArgs} args - Arguments to find a Provinsi
     * @example
     * // Get one Provinsi
     * const provinsi = await prisma.provinsi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProvinsiFindUniqueArgs>(args: SelectSubset<T, ProvinsiFindUniqueArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Provinsi that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProvinsiFindUniqueOrThrowArgs} args - Arguments to find a Provinsi
     * @example
     * // Get one Provinsi
     * const provinsi = await prisma.provinsi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProvinsiFindUniqueOrThrowArgs>(args: SelectSubset<T, ProvinsiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Provinsi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiFindFirstArgs} args - Arguments to find a Provinsi
     * @example
     * // Get one Provinsi
     * const provinsi = await prisma.provinsi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProvinsiFindFirstArgs>(args?: SelectSubset<T, ProvinsiFindFirstArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Provinsi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiFindFirstOrThrowArgs} args - Arguments to find a Provinsi
     * @example
     * // Get one Provinsi
     * const provinsi = await prisma.provinsi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProvinsiFindFirstOrThrowArgs>(args?: SelectSubset<T, ProvinsiFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Provinsis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Provinsis
     * const provinsis = await prisma.provinsi.findMany()
     * 
     * // Get first 10 Provinsis
     * const provinsis = await prisma.provinsi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const provinsiWithIdOnly = await prisma.provinsi.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProvinsiFindManyArgs>(args?: SelectSubset<T, ProvinsiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Provinsi.
     * @param {ProvinsiCreateArgs} args - Arguments to create a Provinsi.
     * @example
     * // Create one Provinsi
     * const Provinsi = await prisma.provinsi.create({
     *   data: {
     *     // ... data to create a Provinsi
     *   }
     * })
     * 
     */
    create<T extends ProvinsiCreateArgs>(args: SelectSubset<T, ProvinsiCreateArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Provinsis.
     * @param {ProvinsiCreateManyArgs} args - Arguments to create many Provinsis.
     * @example
     * // Create many Provinsis
     * const provinsi = await prisma.provinsi.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProvinsiCreateManyArgs>(args?: SelectSubset<T, ProvinsiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Provinsi.
     * @param {ProvinsiDeleteArgs} args - Arguments to delete one Provinsi.
     * @example
     * // Delete one Provinsi
     * const Provinsi = await prisma.provinsi.delete({
     *   where: {
     *     // ... filter to delete one Provinsi
     *   }
     * })
     * 
     */
    delete<T extends ProvinsiDeleteArgs>(args: SelectSubset<T, ProvinsiDeleteArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Provinsi.
     * @param {ProvinsiUpdateArgs} args - Arguments to update one Provinsi.
     * @example
     * // Update one Provinsi
     * const provinsi = await prisma.provinsi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProvinsiUpdateArgs>(args: SelectSubset<T, ProvinsiUpdateArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Provinsis.
     * @param {ProvinsiDeleteManyArgs} args - Arguments to filter Provinsis to delete.
     * @example
     * // Delete a few Provinsis
     * const { count } = await prisma.provinsi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProvinsiDeleteManyArgs>(args?: SelectSubset<T, ProvinsiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Provinsis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Provinsis
     * const provinsi = await prisma.provinsi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProvinsiUpdateManyArgs>(args: SelectSubset<T, ProvinsiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Provinsi.
     * @param {ProvinsiUpsertArgs} args - Arguments to update or create a Provinsi.
     * @example
     * // Update or create a Provinsi
     * const provinsi = await prisma.provinsi.upsert({
     *   create: {
     *     // ... data to create a Provinsi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Provinsi we want to update
     *   }
     * })
     */
    upsert<T extends ProvinsiUpsertArgs>(args: SelectSubset<T, ProvinsiUpsertArgs<ExtArgs>>): Prisma__ProvinsiClient<$Result.GetResult<Prisma.$ProvinsiPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Provinsis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiCountArgs} args - Arguments to filter Provinsis to count.
     * @example
     * // Count the number of Provinsis
     * const count = await prisma.provinsi.count({
     *   where: {
     *     // ... the filter for the Provinsis we want to count
     *   }
     * })
    **/
    count<T extends ProvinsiCountArgs>(
      args?: Subset<T, ProvinsiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProvinsiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Provinsi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProvinsiAggregateArgs>(args: Subset<T, ProvinsiAggregateArgs>): Prisma.PrismaPromise<GetProvinsiAggregateType<T>>

    /**
     * Group by Provinsi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinsiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProvinsiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProvinsiGroupByArgs['orderBy'] }
        : { orderBy?: ProvinsiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProvinsiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProvinsiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Provinsi model
   */
  readonly fields: ProvinsiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Provinsi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProvinsiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dataPenerimaBantuans<T extends Provinsi$dataPenerimaBantuansArgs<ExtArgs> = {}>(args?: Subset<T, Provinsi$dataPenerimaBantuansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataPenerimaBantuanPayload<ExtArgs>, T, "findMany"> | Null>
    kabupaten<T extends Provinsi$kabupatenArgs<ExtArgs> = {}>(args?: Subset<T, Provinsi$kabupatenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KabupatenPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Provinsi model
   */ 
  interface ProvinsiFieldRefs {
    readonly id: FieldRef<"Provinsi", 'String'>
    readonly namaProvinsi: FieldRef<"Provinsi", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Provinsi findUnique
   */
  export type ProvinsiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * Filter, which Provinsi to fetch.
     */
    where: ProvinsiWhereUniqueInput
  }

  /**
   * Provinsi findUniqueOrThrow
   */
  export type ProvinsiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * Filter, which Provinsi to fetch.
     */
    where: ProvinsiWhereUniqueInput
  }

  /**
   * Provinsi findFirst
   */
  export type ProvinsiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * Filter, which Provinsi to fetch.
     */
    where?: ProvinsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinsis to fetch.
     */
    orderBy?: ProvinsiOrderByWithRelationInput | ProvinsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Provinsis.
     */
    cursor?: ProvinsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinsis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Provinsis.
     */
    distinct?: ProvinsiScalarFieldEnum | ProvinsiScalarFieldEnum[]
  }

  /**
   * Provinsi findFirstOrThrow
   */
  export type ProvinsiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * Filter, which Provinsi to fetch.
     */
    where?: ProvinsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinsis to fetch.
     */
    orderBy?: ProvinsiOrderByWithRelationInput | ProvinsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Provinsis.
     */
    cursor?: ProvinsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinsis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Provinsis.
     */
    distinct?: ProvinsiScalarFieldEnum | ProvinsiScalarFieldEnum[]
  }

  /**
   * Provinsi findMany
   */
  export type ProvinsiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * Filter, which Provinsis to fetch.
     */
    where?: ProvinsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinsis to fetch.
     */
    orderBy?: ProvinsiOrderByWithRelationInput | ProvinsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Provinsis.
     */
    cursor?: ProvinsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinsis.
     */
    skip?: number
    distinct?: ProvinsiScalarFieldEnum | ProvinsiScalarFieldEnum[]
  }

  /**
   * Provinsi create
   */
  export type ProvinsiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * The data needed to create a Provinsi.
     */
    data: XOR<ProvinsiCreateInput, ProvinsiUncheckedCreateInput>
  }

  /**
   * Provinsi createMany
   */
  export type ProvinsiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Provinsis.
     */
    data: ProvinsiCreateManyInput | ProvinsiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Provinsi update
   */
  export type ProvinsiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * The data needed to update a Provinsi.
     */
    data: XOR<ProvinsiUpdateInput, ProvinsiUncheckedUpdateInput>
    /**
     * Choose, which Provinsi to update.
     */
    where: ProvinsiWhereUniqueInput
  }

  /**
   * Provinsi updateMany
   */
  export type ProvinsiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Provinsis.
     */
    data: XOR<ProvinsiUpdateManyMutationInput, ProvinsiUncheckedUpdateManyInput>
    /**
     * Filter which Provinsis to update
     */
    where?: ProvinsiWhereInput
  }

  /**
   * Provinsi upsert
   */
  export type ProvinsiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * The filter to search for the Provinsi to update in case it exists.
     */
    where: ProvinsiWhereUniqueInput
    /**
     * In case the Provinsi found by the `where` argument doesn't exist, create a new Provinsi with this data.
     */
    create: XOR<ProvinsiCreateInput, ProvinsiUncheckedCreateInput>
    /**
     * In case the Provinsi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProvinsiUpdateInput, ProvinsiUncheckedUpdateInput>
  }

  /**
   * Provinsi delete
   */
  export type ProvinsiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
    /**
     * Filter which Provinsi to delete.
     */
    where: ProvinsiWhereUniqueInput
  }

  /**
   * Provinsi deleteMany
   */
  export type ProvinsiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provinsis to delete
     */
    where?: ProvinsiWhereInput
  }

  /**
   * Provinsi.dataPenerimaBantuans
   */
  export type Provinsi$dataPenerimaBantuansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataPenerimaBantuan
     */
    select?: DataPenerimaBantuanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataPenerimaBantuanInclude<ExtArgs> | null
    where?: DataPenerimaBantuanWhereInput
    orderBy?: DataPenerimaBantuanOrderByWithRelationInput | DataPenerimaBantuanOrderByWithRelationInput[]
    cursor?: DataPenerimaBantuanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataPenerimaBantuanScalarFieldEnum | DataPenerimaBantuanScalarFieldEnum[]
  }

  /**
   * Provinsi.kabupaten
   */
  export type Provinsi$kabupatenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kabupaten
     */
    select?: KabupatenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabupatenInclude<ExtArgs> | null
    where?: KabupatenWhereInput
    orderBy?: KabupatenOrderByWithRelationInput | KabupatenOrderByWithRelationInput[]
    cursor?: KabupatenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KabupatenScalarFieldEnum | KabupatenScalarFieldEnum[]
  }

  /**
   * Provinsi without action
   */
  export type ProvinsiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provinsi
     */
    select?: ProvinsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinsiInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DataPenerimaBantuanScalarFieldEnum: {
    id: 'id',
    namaProgram: 'namaProgram',
    jumlahPenerima: 'jumlahPenerima',
    tanggalPenyaluran: 'tanggalPenyaluran',
    provinsiId: 'provinsiId',
    kecamatanId: 'kecamatanId',
    kabupatenId: 'kabupatenId',
    catatanTambahan: 'catatanTambahan',
    urlBuktiPenyaluran: 'urlBuktiPenyaluran',
    status: 'status',
    email: 'email'
  };

  export type DataPenerimaBantuanScalarFieldEnum = (typeof DataPenerimaBantuanScalarFieldEnum)[keyof typeof DataPenerimaBantuanScalarFieldEnum]


  export const KecamatanScalarFieldEnum: {
    id: 'id',
    namaKecamatan: 'namaKecamatan',
    kabupatenId: 'kabupatenId'
  };

  export type KecamatanScalarFieldEnum = (typeof KecamatanScalarFieldEnum)[keyof typeof KecamatanScalarFieldEnum]


  export const KabupatenScalarFieldEnum: {
    id: 'id',
    namaKabupaten: 'namaKabupaten',
    provinsiId: 'provinsiId'
  };

  export type KabupatenScalarFieldEnum = (typeof KabupatenScalarFieldEnum)[keyof typeof KabupatenScalarFieldEnum]


  export const ProvinsiScalarFieldEnum: {
    id: 'id',
    namaProvinsi: 'namaProvinsi'
  };

  export type ProvinsiScalarFieldEnum = (typeof ProvinsiScalarFieldEnum)[keyof typeof ProvinsiScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const DataPenerimaBantuanOrderByRelevanceFieldEnum: {
    namaProgram: 'namaProgram',
    provinsiId: 'provinsiId',
    kecamatanId: 'kecamatanId',
    kabupatenId: 'kabupatenId',
    catatanTambahan: 'catatanTambahan',
    urlBuktiPenyaluran: 'urlBuktiPenyaluran',
    email: 'email'
  };

  export type DataPenerimaBantuanOrderByRelevanceFieldEnum = (typeof DataPenerimaBantuanOrderByRelevanceFieldEnum)[keyof typeof DataPenerimaBantuanOrderByRelevanceFieldEnum]


  export const kecamatanOrderByRelevanceFieldEnum: {
    id: 'id',
    namaKecamatan: 'namaKecamatan',
    kabupatenId: 'kabupatenId'
  };

  export type kecamatanOrderByRelevanceFieldEnum = (typeof kecamatanOrderByRelevanceFieldEnum)[keyof typeof kecamatanOrderByRelevanceFieldEnum]


  export const KabupatenOrderByRelevanceFieldEnum: {
    id: 'id',
    namaKabupaten: 'namaKabupaten',
    provinsiId: 'provinsiId'
  };

  export type KabupatenOrderByRelevanceFieldEnum = (typeof KabupatenOrderByRelevanceFieldEnum)[keyof typeof KabupatenOrderByRelevanceFieldEnum]


  export const ProvinsiOrderByRelevanceFieldEnum: {
    id: 'id',
    namaProvinsi: 'namaProvinsi'
  };

  export type ProvinsiOrderByRelevanceFieldEnum = (typeof ProvinsiOrderByRelevanceFieldEnum)[keyof typeof ProvinsiOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'status'
   */
  export type EnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type DataPenerimaBantuanWhereInput = {
    AND?: DataPenerimaBantuanWhereInput | DataPenerimaBantuanWhereInput[]
    OR?: DataPenerimaBantuanWhereInput[]
    NOT?: DataPenerimaBantuanWhereInput | DataPenerimaBantuanWhereInput[]
    id?: IntFilter<"DataPenerimaBantuan"> | number
    namaProgram?: StringFilter<"DataPenerimaBantuan"> | string
    jumlahPenerima?: IntFilter<"DataPenerimaBantuan"> | number
    tanggalPenyaluran?: DateTimeFilter<"DataPenerimaBantuan"> | Date | string
    provinsiId?: StringFilter<"DataPenerimaBantuan"> | string
    kecamatanId?: StringFilter<"DataPenerimaBantuan"> | string
    kabupatenId?: StringFilter<"DataPenerimaBantuan"> | string
    catatanTambahan?: StringNullableFilter<"DataPenerimaBantuan"> | string | null
    urlBuktiPenyaluran?: StringFilter<"DataPenerimaBantuan"> | string
    status?: EnumstatusFilter<"DataPenerimaBantuan"> | $Enums.status
    email?: StringFilter<"DataPenerimaBantuan"> | string
    kecamatan?: XOR<KecamatanScalarRelationFilter, kecamatanWhereInput>
    kabupaten?: XOR<KabupatenScalarRelationFilter, KabupatenWhereInput>
    provinsi?: XOR<ProvinsiScalarRelationFilter, ProvinsiWhereInput>
  }

  export type DataPenerimaBantuanOrderByWithRelationInput = {
    id?: SortOrder
    namaProgram?: SortOrder
    jumlahPenerima?: SortOrder
    tanggalPenyaluran?: SortOrder
    provinsiId?: SortOrder
    kecamatanId?: SortOrder
    kabupatenId?: SortOrder
    catatanTambahan?: SortOrderInput | SortOrder
    urlBuktiPenyaluran?: SortOrder
    status?: SortOrder
    email?: SortOrder
    kecamatan?: kecamatanOrderByWithRelationInput
    kabupaten?: KabupatenOrderByWithRelationInput
    provinsi?: ProvinsiOrderByWithRelationInput
    _relevance?: DataPenerimaBantuanOrderByRelevanceInput
  }

  export type DataPenerimaBantuanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DataPenerimaBantuanWhereInput | DataPenerimaBantuanWhereInput[]
    OR?: DataPenerimaBantuanWhereInput[]
    NOT?: DataPenerimaBantuanWhereInput | DataPenerimaBantuanWhereInput[]
    namaProgram?: StringFilter<"DataPenerimaBantuan"> | string
    jumlahPenerima?: IntFilter<"DataPenerimaBantuan"> | number
    tanggalPenyaluran?: DateTimeFilter<"DataPenerimaBantuan"> | Date | string
    provinsiId?: StringFilter<"DataPenerimaBantuan"> | string
    kecamatanId?: StringFilter<"DataPenerimaBantuan"> | string
    kabupatenId?: StringFilter<"DataPenerimaBantuan"> | string
    catatanTambahan?: StringNullableFilter<"DataPenerimaBantuan"> | string | null
    urlBuktiPenyaluran?: StringFilter<"DataPenerimaBantuan"> | string
    status?: EnumstatusFilter<"DataPenerimaBantuan"> | $Enums.status
    email?: StringFilter<"DataPenerimaBantuan"> | string
    kecamatan?: XOR<KecamatanScalarRelationFilter, kecamatanWhereInput>
    kabupaten?: XOR<KabupatenScalarRelationFilter, KabupatenWhereInput>
    provinsi?: XOR<ProvinsiScalarRelationFilter, ProvinsiWhereInput>
  }, "id">

  export type DataPenerimaBantuanOrderByWithAggregationInput = {
    id?: SortOrder
    namaProgram?: SortOrder
    jumlahPenerima?: SortOrder
    tanggalPenyaluran?: SortOrder
    provinsiId?: SortOrder
    kecamatanId?: SortOrder
    kabupatenId?: SortOrder
    catatanTambahan?: SortOrderInput | SortOrder
    urlBuktiPenyaluran?: SortOrder
    status?: SortOrder
    email?: SortOrder
    _count?: DataPenerimaBantuanCountOrderByAggregateInput
    _avg?: DataPenerimaBantuanAvgOrderByAggregateInput
    _max?: DataPenerimaBantuanMaxOrderByAggregateInput
    _min?: DataPenerimaBantuanMinOrderByAggregateInput
    _sum?: DataPenerimaBantuanSumOrderByAggregateInput
  }

  export type DataPenerimaBantuanScalarWhereWithAggregatesInput = {
    AND?: DataPenerimaBantuanScalarWhereWithAggregatesInput | DataPenerimaBantuanScalarWhereWithAggregatesInput[]
    OR?: DataPenerimaBantuanScalarWhereWithAggregatesInput[]
    NOT?: DataPenerimaBantuanScalarWhereWithAggregatesInput | DataPenerimaBantuanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DataPenerimaBantuan"> | number
    namaProgram?: StringWithAggregatesFilter<"DataPenerimaBantuan"> | string
    jumlahPenerima?: IntWithAggregatesFilter<"DataPenerimaBantuan"> | number
    tanggalPenyaluran?: DateTimeWithAggregatesFilter<"DataPenerimaBantuan"> | Date | string
    provinsiId?: StringWithAggregatesFilter<"DataPenerimaBantuan"> | string
    kecamatanId?: StringWithAggregatesFilter<"DataPenerimaBantuan"> | string
    kabupatenId?: StringWithAggregatesFilter<"DataPenerimaBantuan"> | string
    catatanTambahan?: StringNullableWithAggregatesFilter<"DataPenerimaBantuan"> | string | null
    urlBuktiPenyaluran?: StringWithAggregatesFilter<"DataPenerimaBantuan"> | string
    status?: EnumstatusWithAggregatesFilter<"DataPenerimaBantuan"> | $Enums.status
    email?: StringWithAggregatesFilter<"DataPenerimaBantuan"> | string
  }

  export type kecamatanWhereInput = {
    AND?: kecamatanWhereInput | kecamatanWhereInput[]
    OR?: kecamatanWhereInput[]
    NOT?: kecamatanWhereInput | kecamatanWhereInput[]
    id?: StringFilter<"kecamatan"> | string
    namaKecamatan?: StringFilter<"kecamatan"> | string
    kabupatenId?: StringFilter<"kecamatan"> | string
    dataPenerimaBantuans?: DataPenerimaBantuanListRelationFilter
    kabupaten?: XOR<KabupatenScalarRelationFilter, KabupatenWhereInput>
  }

  export type kecamatanOrderByWithRelationInput = {
    id?: SortOrder
    namaKecamatan?: SortOrder
    kabupatenId?: SortOrder
    dataPenerimaBantuans?: DataPenerimaBantuanOrderByRelationAggregateInput
    kabupaten?: KabupatenOrderByWithRelationInput
    _relevance?: kecamatanOrderByRelevanceInput
  }

  export type kecamatanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: kecamatanWhereInput | kecamatanWhereInput[]
    OR?: kecamatanWhereInput[]
    NOT?: kecamatanWhereInput | kecamatanWhereInput[]
    namaKecamatan?: StringFilter<"kecamatan"> | string
    kabupatenId?: StringFilter<"kecamatan"> | string
    dataPenerimaBantuans?: DataPenerimaBantuanListRelationFilter
    kabupaten?: XOR<KabupatenScalarRelationFilter, KabupatenWhereInput>
  }, "id">

  export type kecamatanOrderByWithAggregationInput = {
    id?: SortOrder
    namaKecamatan?: SortOrder
    kabupatenId?: SortOrder
    _count?: kecamatanCountOrderByAggregateInput
    _max?: kecamatanMaxOrderByAggregateInput
    _min?: kecamatanMinOrderByAggregateInput
  }

  export type kecamatanScalarWhereWithAggregatesInput = {
    AND?: kecamatanScalarWhereWithAggregatesInput | kecamatanScalarWhereWithAggregatesInput[]
    OR?: kecamatanScalarWhereWithAggregatesInput[]
    NOT?: kecamatanScalarWhereWithAggregatesInput | kecamatanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"kecamatan"> | string
    namaKecamatan?: StringWithAggregatesFilter<"kecamatan"> | string
    kabupatenId?: StringWithAggregatesFilter<"kecamatan"> | string
  }

  export type KabupatenWhereInput = {
    AND?: KabupatenWhereInput | KabupatenWhereInput[]
    OR?: KabupatenWhereInput[]
    NOT?: KabupatenWhereInput | KabupatenWhereInput[]
    id?: StringFilter<"Kabupaten"> | string
    namaKabupaten?: StringFilter<"Kabupaten"> | string
    provinsiId?: StringFilter<"Kabupaten"> | string
    provinsi?: XOR<ProvinsiScalarRelationFilter, ProvinsiWhereInput>
    dataPenerimaBantuans?: DataPenerimaBantuanListRelationFilter
    kecamatan?: KecamatanListRelationFilter
  }

  export type KabupatenOrderByWithRelationInput = {
    id?: SortOrder
    namaKabupaten?: SortOrder
    provinsiId?: SortOrder
    provinsi?: ProvinsiOrderByWithRelationInput
    dataPenerimaBantuans?: DataPenerimaBantuanOrderByRelationAggregateInput
    kecamatan?: kecamatanOrderByRelationAggregateInput
    _relevance?: KabupatenOrderByRelevanceInput
  }

  export type KabupatenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KabupatenWhereInput | KabupatenWhereInput[]
    OR?: KabupatenWhereInput[]
    NOT?: KabupatenWhereInput | KabupatenWhereInput[]
    namaKabupaten?: StringFilter<"Kabupaten"> | string
    provinsiId?: StringFilter<"Kabupaten"> | string
    provinsi?: XOR<ProvinsiScalarRelationFilter, ProvinsiWhereInput>
    dataPenerimaBantuans?: DataPenerimaBantuanListRelationFilter
    kecamatan?: KecamatanListRelationFilter
  }, "id">

  export type KabupatenOrderByWithAggregationInput = {
    id?: SortOrder
    namaKabupaten?: SortOrder
    provinsiId?: SortOrder
    _count?: KabupatenCountOrderByAggregateInput
    _max?: KabupatenMaxOrderByAggregateInput
    _min?: KabupatenMinOrderByAggregateInput
  }

  export type KabupatenScalarWhereWithAggregatesInput = {
    AND?: KabupatenScalarWhereWithAggregatesInput | KabupatenScalarWhereWithAggregatesInput[]
    OR?: KabupatenScalarWhereWithAggregatesInput[]
    NOT?: KabupatenScalarWhereWithAggregatesInput | KabupatenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Kabupaten"> | string
    namaKabupaten?: StringWithAggregatesFilter<"Kabupaten"> | string
    provinsiId?: StringWithAggregatesFilter<"Kabupaten"> | string
  }

  export type ProvinsiWhereInput = {
    AND?: ProvinsiWhereInput | ProvinsiWhereInput[]
    OR?: ProvinsiWhereInput[]
    NOT?: ProvinsiWhereInput | ProvinsiWhereInput[]
    id?: StringFilter<"Provinsi"> | string
    namaProvinsi?: StringFilter<"Provinsi"> | string
    dataPenerimaBantuans?: DataPenerimaBantuanListRelationFilter
    kabupaten?: KabupatenListRelationFilter
  }

  export type ProvinsiOrderByWithRelationInput = {
    id?: SortOrder
    namaProvinsi?: SortOrder
    dataPenerimaBantuans?: DataPenerimaBantuanOrderByRelationAggregateInput
    kabupaten?: KabupatenOrderByRelationAggregateInput
    _relevance?: ProvinsiOrderByRelevanceInput
  }

  export type ProvinsiWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProvinsiWhereInput | ProvinsiWhereInput[]
    OR?: ProvinsiWhereInput[]
    NOT?: ProvinsiWhereInput | ProvinsiWhereInput[]
    namaProvinsi?: StringFilter<"Provinsi"> | string
    dataPenerimaBantuans?: DataPenerimaBantuanListRelationFilter
    kabupaten?: KabupatenListRelationFilter
  }, "id">

  export type ProvinsiOrderByWithAggregationInput = {
    id?: SortOrder
    namaProvinsi?: SortOrder
    _count?: ProvinsiCountOrderByAggregateInput
    _max?: ProvinsiMaxOrderByAggregateInput
    _min?: ProvinsiMinOrderByAggregateInput
  }

  export type ProvinsiScalarWhereWithAggregatesInput = {
    AND?: ProvinsiScalarWhereWithAggregatesInput | ProvinsiScalarWhereWithAggregatesInput[]
    OR?: ProvinsiScalarWhereWithAggregatesInput[]
    NOT?: ProvinsiScalarWhereWithAggregatesInput | ProvinsiScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Provinsi"> | string
    namaProvinsi?: StringWithAggregatesFilter<"Provinsi"> | string
  }

  export type DataPenerimaBantuanCreateInput = {
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
    kecamatan: kecamatanCreateNestedOneWithoutDataPenerimaBantuansInput
    kabupaten: KabupatenCreateNestedOneWithoutDataPenerimaBantuansInput
    provinsi: ProvinsiCreateNestedOneWithoutDataPenerimaBantuansInput
  }

  export type DataPenerimaBantuanUncheckedCreateInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    provinsiId: string
    kecamatanId: string
    kabupatenId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type DataPenerimaBantuanUpdateInput = {
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
    kecamatan?: kecamatanUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
    kabupaten?: KabupatenUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
    provinsi?: ProvinsiUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
  }

  export type DataPenerimaBantuanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kecamatanId?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanCreateManyInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    provinsiId: string
    kecamatanId: string
    kabupatenId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type DataPenerimaBantuanUpdateManyMutationInput = {
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kecamatanId?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type kecamatanCreateInput = {
    id: string
    namaKecamatan: string
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutKecamatanInput
    kabupaten: KabupatenCreateNestedOneWithoutKecamatanInput
  }

  export type kecamatanUncheckedCreateInput = {
    id: string
    namaKecamatan: string
    kabupatenId: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutKecamatanInput
  }

  export type kecamatanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutKecamatanNestedInput
    kabupaten?: KabupatenUpdateOneRequiredWithoutKecamatanNestedInput
  }

  export type kecamatanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutKecamatanNestedInput
  }

  export type kecamatanCreateManyInput = {
    id: string
    namaKecamatan: string
    kabupatenId: string
  }

  export type kecamatanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
  }

  export type kecamatanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
  }

  export type KabupatenCreateInput = {
    id: string
    namaKabupaten: string
    provinsi: ProvinsiCreateNestedOneWithoutKabupatenInput
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutKabupatenInput
    kecamatan?: kecamatanCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenUncheckedCreateInput = {
    id: string
    namaKabupaten: string
    provinsiId: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutKabupatenInput
    kecamatan?: kecamatanUncheckedCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsi?: ProvinsiUpdateOneRequiredWithoutKabupatenNestedInput
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutKabupatenNestedInput
    kecamatan?: kecamatanUpdateManyWithoutKabupatenNestedInput
  }

  export type KabupatenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutKabupatenNestedInput
    kecamatan?: kecamatanUncheckedUpdateManyWithoutKabupatenNestedInput
  }

  export type KabupatenCreateManyInput = {
    id: string
    namaKabupaten: string
    provinsiId: string
  }

  export type KabupatenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
  }

  export type KabupatenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsiId?: StringFieldUpdateOperationsInput | string
  }

  export type ProvinsiCreateInput = {
    id: string
    namaProvinsi: string
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutProvinsiInput
    kabupaten?: KabupatenCreateNestedManyWithoutProvinsiInput
  }

  export type ProvinsiUncheckedCreateInput = {
    id: string
    namaProvinsi: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutProvinsiInput
    kabupaten?: KabupatenUncheckedCreateNestedManyWithoutProvinsiInput
  }

  export type ProvinsiUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutProvinsiNestedInput
    kabupaten?: KabupatenUpdateManyWithoutProvinsiNestedInput
  }

  export type ProvinsiUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutProvinsiNestedInput
    kabupaten?: KabupatenUncheckedUpdateManyWithoutProvinsiNestedInput
  }

  export type ProvinsiCreateManyInput = {
    id: string
    namaProvinsi: string
  }

  export type ProvinsiUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
  }

  export type ProvinsiUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[]
    notIn?: $Enums.status[]
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type KecamatanScalarRelationFilter = {
    is?: kecamatanWhereInput
    isNot?: kecamatanWhereInput
  }

  export type KabupatenScalarRelationFilter = {
    is?: KabupatenWhereInput
    isNot?: KabupatenWhereInput
  }

  export type ProvinsiScalarRelationFilter = {
    is?: ProvinsiWhereInput
    isNot?: ProvinsiWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DataPenerimaBantuanOrderByRelevanceInput = {
    fields: DataPenerimaBantuanOrderByRelevanceFieldEnum | DataPenerimaBantuanOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DataPenerimaBantuanCountOrderByAggregateInput = {
    id?: SortOrder
    namaProgram?: SortOrder
    jumlahPenerima?: SortOrder
    tanggalPenyaluran?: SortOrder
    provinsiId?: SortOrder
    kecamatanId?: SortOrder
    kabupatenId?: SortOrder
    catatanTambahan?: SortOrder
    urlBuktiPenyaluran?: SortOrder
    status?: SortOrder
    email?: SortOrder
  }

  export type DataPenerimaBantuanAvgOrderByAggregateInput = {
    id?: SortOrder
    jumlahPenerima?: SortOrder
  }

  export type DataPenerimaBantuanMaxOrderByAggregateInput = {
    id?: SortOrder
    namaProgram?: SortOrder
    jumlahPenerima?: SortOrder
    tanggalPenyaluran?: SortOrder
    provinsiId?: SortOrder
    kecamatanId?: SortOrder
    kabupatenId?: SortOrder
    catatanTambahan?: SortOrder
    urlBuktiPenyaluran?: SortOrder
    status?: SortOrder
    email?: SortOrder
  }

  export type DataPenerimaBantuanMinOrderByAggregateInput = {
    id?: SortOrder
    namaProgram?: SortOrder
    jumlahPenerima?: SortOrder
    tanggalPenyaluran?: SortOrder
    provinsiId?: SortOrder
    kecamatanId?: SortOrder
    kabupatenId?: SortOrder
    catatanTambahan?: SortOrder
    urlBuktiPenyaluran?: SortOrder
    status?: SortOrder
    email?: SortOrder
  }

  export type DataPenerimaBantuanSumOrderByAggregateInput = {
    id?: SortOrder
    jumlahPenerima?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[]
    notIn?: $Enums.status[]
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type DataPenerimaBantuanListRelationFilter = {
    every?: DataPenerimaBantuanWhereInput
    some?: DataPenerimaBantuanWhereInput
    none?: DataPenerimaBantuanWhereInput
  }

  export type DataPenerimaBantuanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type kecamatanOrderByRelevanceInput = {
    fields: kecamatanOrderByRelevanceFieldEnum | kecamatanOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type kecamatanCountOrderByAggregateInput = {
    id?: SortOrder
    namaKecamatan?: SortOrder
    kabupatenId?: SortOrder
  }

  export type kecamatanMaxOrderByAggregateInput = {
    id?: SortOrder
    namaKecamatan?: SortOrder
    kabupatenId?: SortOrder
  }

  export type kecamatanMinOrderByAggregateInput = {
    id?: SortOrder
    namaKecamatan?: SortOrder
    kabupatenId?: SortOrder
  }

  export type KecamatanListRelationFilter = {
    every?: kecamatanWhereInput
    some?: kecamatanWhereInput
    none?: kecamatanWhereInput
  }

  export type kecamatanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KabupatenOrderByRelevanceInput = {
    fields: KabupatenOrderByRelevanceFieldEnum | KabupatenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type KabupatenCountOrderByAggregateInput = {
    id?: SortOrder
    namaKabupaten?: SortOrder
    provinsiId?: SortOrder
  }

  export type KabupatenMaxOrderByAggregateInput = {
    id?: SortOrder
    namaKabupaten?: SortOrder
    provinsiId?: SortOrder
  }

  export type KabupatenMinOrderByAggregateInput = {
    id?: SortOrder
    namaKabupaten?: SortOrder
    provinsiId?: SortOrder
  }

  export type KabupatenListRelationFilter = {
    every?: KabupatenWhereInput
    some?: KabupatenWhereInput
    none?: KabupatenWhereInput
  }

  export type KabupatenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProvinsiOrderByRelevanceInput = {
    fields: ProvinsiOrderByRelevanceFieldEnum | ProvinsiOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProvinsiCountOrderByAggregateInput = {
    id?: SortOrder
    namaProvinsi?: SortOrder
  }

  export type ProvinsiMaxOrderByAggregateInput = {
    id?: SortOrder
    namaProvinsi?: SortOrder
  }

  export type ProvinsiMinOrderByAggregateInput = {
    id?: SortOrder
    namaProvinsi?: SortOrder
  }

  export type kecamatanCreateNestedOneWithoutDataPenerimaBantuansInput = {
    create?: XOR<kecamatanCreateWithoutDataPenerimaBantuansInput, kecamatanUncheckedCreateWithoutDataPenerimaBantuansInput>
    connectOrCreate?: kecamatanCreateOrConnectWithoutDataPenerimaBantuansInput
    connect?: kecamatanWhereUniqueInput
  }

  export type KabupatenCreateNestedOneWithoutDataPenerimaBantuansInput = {
    create?: XOR<KabupatenCreateWithoutDataPenerimaBantuansInput, KabupatenUncheckedCreateWithoutDataPenerimaBantuansInput>
    connectOrCreate?: KabupatenCreateOrConnectWithoutDataPenerimaBantuansInput
    connect?: KabupatenWhereUniqueInput
  }

  export type ProvinsiCreateNestedOneWithoutDataPenerimaBantuansInput = {
    create?: XOR<ProvinsiCreateWithoutDataPenerimaBantuansInput, ProvinsiUncheckedCreateWithoutDataPenerimaBantuansInput>
    connectOrCreate?: ProvinsiCreateOrConnectWithoutDataPenerimaBantuansInput
    connect?: ProvinsiWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumstatusFieldUpdateOperationsInput = {
    set?: $Enums.status
  }

  export type kecamatanUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput = {
    create?: XOR<kecamatanCreateWithoutDataPenerimaBantuansInput, kecamatanUncheckedCreateWithoutDataPenerimaBantuansInput>
    connectOrCreate?: kecamatanCreateOrConnectWithoutDataPenerimaBantuansInput
    upsert?: kecamatanUpsertWithoutDataPenerimaBantuansInput
    connect?: kecamatanWhereUniqueInput
    update?: XOR<XOR<kecamatanUpdateToOneWithWhereWithoutDataPenerimaBantuansInput, kecamatanUpdateWithoutDataPenerimaBantuansInput>, kecamatanUncheckedUpdateWithoutDataPenerimaBantuansInput>
  }

  export type KabupatenUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput = {
    create?: XOR<KabupatenCreateWithoutDataPenerimaBantuansInput, KabupatenUncheckedCreateWithoutDataPenerimaBantuansInput>
    connectOrCreate?: KabupatenCreateOrConnectWithoutDataPenerimaBantuansInput
    upsert?: KabupatenUpsertWithoutDataPenerimaBantuansInput
    connect?: KabupatenWhereUniqueInput
    update?: XOR<XOR<KabupatenUpdateToOneWithWhereWithoutDataPenerimaBantuansInput, KabupatenUpdateWithoutDataPenerimaBantuansInput>, KabupatenUncheckedUpdateWithoutDataPenerimaBantuansInput>
  }

  export type ProvinsiUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput = {
    create?: XOR<ProvinsiCreateWithoutDataPenerimaBantuansInput, ProvinsiUncheckedCreateWithoutDataPenerimaBantuansInput>
    connectOrCreate?: ProvinsiCreateOrConnectWithoutDataPenerimaBantuansInput
    upsert?: ProvinsiUpsertWithoutDataPenerimaBantuansInput
    connect?: ProvinsiWhereUniqueInput
    update?: XOR<XOR<ProvinsiUpdateToOneWithWhereWithoutDataPenerimaBantuansInput, ProvinsiUpdateWithoutDataPenerimaBantuansInput>, ProvinsiUncheckedUpdateWithoutDataPenerimaBantuansInput>
  }

  export type DataPenerimaBantuanCreateNestedManyWithoutKecamatanInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKecamatanInput, DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput> | DataPenerimaBantuanCreateWithoutKecamatanInput[] | DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput | DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput[]
    createMany?: DataPenerimaBantuanCreateManyKecamatanInputEnvelope
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
  }

  export type KabupatenCreateNestedOneWithoutKecamatanInput = {
    create?: XOR<KabupatenCreateWithoutKecamatanInput, KabupatenUncheckedCreateWithoutKecamatanInput>
    connectOrCreate?: KabupatenCreateOrConnectWithoutKecamatanInput
    connect?: KabupatenWhereUniqueInput
  }

  export type DataPenerimaBantuanUncheckedCreateNestedManyWithoutKecamatanInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKecamatanInput, DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput> | DataPenerimaBantuanCreateWithoutKecamatanInput[] | DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput | DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput[]
    createMany?: DataPenerimaBantuanCreateManyKecamatanInputEnvelope
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
  }

  export type DataPenerimaBantuanUpdateManyWithoutKecamatanNestedInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKecamatanInput, DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput> | DataPenerimaBantuanCreateWithoutKecamatanInput[] | DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput | DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput[]
    upsert?: DataPenerimaBantuanUpsertWithWhereUniqueWithoutKecamatanInput | DataPenerimaBantuanUpsertWithWhereUniqueWithoutKecamatanInput[]
    createMany?: DataPenerimaBantuanCreateManyKecamatanInputEnvelope
    set?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    disconnect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    delete?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    update?: DataPenerimaBantuanUpdateWithWhereUniqueWithoutKecamatanInput | DataPenerimaBantuanUpdateWithWhereUniqueWithoutKecamatanInput[]
    updateMany?: DataPenerimaBantuanUpdateManyWithWhereWithoutKecamatanInput | DataPenerimaBantuanUpdateManyWithWhereWithoutKecamatanInput[]
    deleteMany?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
  }

  export type KabupatenUpdateOneRequiredWithoutKecamatanNestedInput = {
    create?: XOR<KabupatenCreateWithoutKecamatanInput, KabupatenUncheckedCreateWithoutKecamatanInput>
    connectOrCreate?: KabupatenCreateOrConnectWithoutKecamatanInput
    upsert?: KabupatenUpsertWithoutKecamatanInput
    connect?: KabupatenWhereUniqueInput
    update?: XOR<XOR<KabupatenUpdateToOneWithWhereWithoutKecamatanInput, KabupatenUpdateWithoutKecamatanInput>, KabupatenUncheckedUpdateWithoutKecamatanInput>
  }

  export type DataPenerimaBantuanUncheckedUpdateManyWithoutKecamatanNestedInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKecamatanInput, DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput> | DataPenerimaBantuanCreateWithoutKecamatanInput[] | DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput | DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput[]
    upsert?: DataPenerimaBantuanUpsertWithWhereUniqueWithoutKecamatanInput | DataPenerimaBantuanUpsertWithWhereUniqueWithoutKecamatanInput[]
    createMany?: DataPenerimaBantuanCreateManyKecamatanInputEnvelope
    set?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    disconnect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    delete?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    update?: DataPenerimaBantuanUpdateWithWhereUniqueWithoutKecamatanInput | DataPenerimaBantuanUpdateWithWhereUniqueWithoutKecamatanInput[]
    updateMany?: DataPenerimaBantuanUpdateManyWithWhereWithoutKecamatanInput | DataPenerimaBantuanUpdateManyWithWhereWithoutKecamatanInput[]
    deleteMany?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
  }

  export type ProvinsiCreateNestedOneWithoutKabupatenInput = {
    create?: XOR<ProvinsiCreateWithoutKabupatenInput, ProvinsiUncheckedCreateWithoutKabupatenInput>
    connectOrCreate?: ProvinsiCreateOrConnectWithoutKabupatenInput
    connect?: ProvinsiWhereUniqueInput
  }

  export type DataPenerimaBantuanCreateNestedManyWithoutKabupatenInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKabupatenInput, DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput> | DataPenerimaBantuanCreateWithoutKabupatenInput[] | DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput | DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput[]
    createMany?: DataPenerimaBantuanCreateManyKabupatenInputEnvelope
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
  }

  export type kecamatanCreateNestedManyWithoutKabupatenInput = {
    create?: XOR<kecamatanCreateWithoutKabupatenInput, kecamatanUncheckedCreateWithoutKabupatenInput> | kecamatanCreateWithoutKabupatenInput[] | kecamatanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: kecamatanCreateOrConnectWithoutKabupatenInput | kecamatanCreateOrConnectWithoutKabupatenInput[]
    createMany?: kecamatanCreateManyKabupatenInputEnvelope
    connect?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
  }

  export type DataPenerimaBantuanUncheckedCreateNestedManyWithoutKabupatenInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKabupatenInput, DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput> | DataPenerimaBantuanCreateWithoutKabupatenInput[] | DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput | DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput[]
    createMany?: DataPenerimaBantuanCreateManyKabupatenInputEnvelope
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
  }

  export type kecamatanUncheckedCreateNestedManyWithoutKabupatenInput = {
    create?: XOR<kecamatanCreateWithoutKabupatenInput, kecamatanUncheckedCreateWithoutKabupatenInput> | kecamatanCreateWithoutKabupatenInput[] | kecamatanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: kecamatanCreateOrConnectWithoutKabupatenInput | kecamatanCreateOrConnectWithoutKabupatenInput[]
    createMany?: kecamatanCreateManyKabupatenInputEnvelope
    connect?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
  }

  export type ProvinsiUpdateOneRequiredWithoutKabupatenNestedInput = {
    create?: XOR<ProvinsiCreateWithoutKabupatenInput, ProvinsiUncheckedCreateWithoutKabupatenInput>
    connectOrCreate?: ProvinsiCreateOrConnectWithoutKabupatenInput
    upsert?: ProvinsiUpsertWithoutKabupatenInput
    connect?: ProvinsiWhereUniqueInput
    update?: XOR<XOR<ProvinsiUpdateToOneWithWhereWithoutKabupatenInput, ProvinsiUpdateWithoutKabupatenInput>, ProvinsiUncheckedUpdateWithoutKabupatenInput>
  }

  export type DataPenerimaBantuanUpdateManyWithoutKabupatenNestedInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKabupatenInput, DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput> | DataPenerimaBantuanCreateWithoutKabupatenInput[] | DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput | DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput[]
    upsert?: DataPenerimaBantuanUpsertWithWhereUniqueWithoutKabupatenInput | DataPenerimaBantuanUpsertWithWhereUniqueWithoutKabupatenInput[]
    createMany?: DataPenerimaBantuanCreateManyKabupatenInputEnvelope
    set?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    disconnect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    delete?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    update?: DataPenerimaBantuanUpdateWithWhereUniqueWithoutKabupatenInput | DataPenerimaBantuanUpdateWithWhereUniqueWithoutKabupatenInput[]
    updateMany?: DataPenerimaBantuanUpdateManyWithWhereWithoutKabupatenInput | DataPenerimaBantuanUpdateManyWithWhereWithoutKabupatenInput[]
    deleteMany?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
  }

  export type kecamatanUpdateManyWithoutKabupatenNestedInput = {
    create?: XOR<kecamatanCreateWithoutKabupatenInput, kecamatanUncheckedCreateWithoutKabupatenInput> | kecamatanCreateWithoutKabupatenInput[] | kecamatanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: kecamatanCreateOrConnectWithoutKabupatenInput | kecamatanCreateOrConnectWithoutKabupatenInput[]
    upsert?: kecamatanUpsertWithWhereUniqueWithoutKabupatenInput | kecamatanUpsertWithWhereUniqueWithoutKabupatenInput[]
    createMany?: kecamatanCreateManyKabupatenInputEnvelope
    set?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    disconnect?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    delete?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    connect?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    update?: kecamatanUpdateWithWhereUniqueWithoutKabupatenInput | kecamatanUpdateWithWhereUniqueWithoutKabupatenInput[]
    updateMany?: kecamatanUpdateManyWithWhereWithoutKabupatenInput | kecamatanUpdateManyWithWhereWithoutKabupatenInput[]
    deleteMany?: kecamatanScalarWhereInput | kecamatanScalarWhereInput[]
  }

  export type DataPenerimaBantuanUncheckedUpdateManyWithoutKabupatenNestedInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutKabupatenInput, DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput> | DataPenerimaBantuanCreateWithoutKabupatenInput[] | DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput | DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput[]
    upsert?: DataPenerimaBantuanUpsertWithWhereUniqueWithoutKabupatenInput | DataPenerimaBantuanUpsertWithWhereUniqueWithoutKabupatenInput[]
    createMany?: DataPenerimaBantuanCreateManyKabupatenInputEnvelope
    set?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    disconnect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    delete?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    update?: DataPenerimaBantuanUpdateWithWhereUniqueWithoutKabupatenInput | DataPenerimaBantuanUpdateWithWhereUniqueWithoutKabupatenInput[]
    updateMany?: DataPenerimaBantuanUpdateManyWithWhereWithoutKabupatenInput | DataPenerimaBantuanUpdateManyWithWhereWithoutKabupatenInput[]
    deleteMany?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
  }

  export type kecamatanUncheckedUpdateManyWithoutKabupatenNestedInput = {
    create?: XOR<kecamatanCreateWithoutKabupatenInput, kecamatanUncheckedCreateWithoutKabupatenInput> | kecamatanCreateWithoutKabupatenInput[] | kecamatanUncheckedCreateWithoutKabupatenInput[]
    connectOrCreate?: kecamatanCreateOrConnectWithoutKabupatenInput | kecamatanCreateOrConnectWithoutKabupatenInput[]
    upsert?: kecamatanUpsertWithWhereUniqueWithoutKabupatenInput | kecamatanUpsertWithWhereUniqueWithoutKabupatenInput[]
    createMany?: kecamatanCreateManyKabupatenInputEnvelope
    set?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    disconnect?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    delete?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    connect?: kecamatanWhereUniqueInput | kecamatanWhereUniqueInput[]
    update?: kecamatanUpdateWithWhereUniqueWithoutKabupatenInput | kecamatanUpdateWithWhereUniqueWithoutKabupatenInput[]
    updateMany?: kecamatanUpdateManyWithWhereWithoutKabupatenInput | kecamatanUpdateManyWithWhereWithoutKabupatenInput[]
    deleteMany?: kecamatanScalarWhereInput | kecamatanScalarWhereInput[]
  }

  export type DataPenerimaBantuanCreateNestedManyWithoutProvinsiInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutProvinsiInput, DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput> | DataPenerimaBantuanCreateWithoutProvinsiInput[] | DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput | DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput[]
    createMany?: DataPenerimaBantuanCreateManyProvinsiInputEnvelope
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
  }

  export type KabupatenCreateNestedManyWithoutProvinsiInput = {
    create?: XOR<KabupatenCreateWithoutProvinsiInput, KabupatenUncheckedCreateWithoutProvinsiInput> | KabupatenCreateWithoutProvinsiInput[] | KabupatenUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: KabupatenCreateOrConnectWithoutProvinsiInput | KabupatenCreateOrConnectWithoutProvinsiInput[]
    createMany?: KabupatenCreateManyProvinsiInputEnvelope
    connect?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
  }

  export type DataPenerimaBantuanUncheckedCreateNestedManyWithoutProvinsiInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutProvinsiInput, DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput> | DataPenerimaBantuanCreateWithoutProvinsiInput[] | DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput | DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput[]
    createMany?: DataPenerimaBantuanCreateManyProvinsiInputEnvelope
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
  }

  export type KabupatenUncheckedCreateNestedManyWithoutProvinsiInput = {
    create?: XOR<KabupatenCreateWithoutProvinsiInput, KabupatenUncheckedCreateWithoutProvinsiInput> | KabupatenCreateWithoutProvinsiInput[] | KabupatenUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: KabupatenCreateOrConnectWithoutProvinsiInput | KabupatenCreateOrConnectWithoutProvinsiInput[]
    createMany?: KabupatenCreateManyProvinsiInputEnvelope
    connect?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
  }

  export type DataPenerimaBantuanUpdateManyWithoutProvinsiNestedInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutProvinsiInput, DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput> | DataPenerimaBantuanCreateWithoutProvinsiInput[] | DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput | DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput[]
    upsert?: DataPenerimaBantuanUpsertWithWhereUniqueWithoutProvinsiInput | DataPenerimaBantuanUpsertWithWhereUniqueWithoutProvinsiInput[]
    createMany?: DataPenerimaBantuanCreateManyProvinsiInputEnvelope
    set?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    disconnect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    delete?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    update?: DataPenerimaBantuanUpdateWithWhereUniqueWithoutProvinsiInput | DataPenerimaBantuanUpdateWithWhereUniqueWithoutProvinsiInput[]
    updateMany?: DataPenerimaBantuanUpdateManyWithWhereWithoutProvinsiInput | DataPenerimaBantuanUpdateManyWithWhereWithoutProvinsiInput[]
    deleteMany?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
  }

  export type KabupatenUpdateManyWithoutProvinsiNestedInput = {
    create?: XOR<KabupatenCreateWithoutProvinsiInput, KabupatenUncheckedCreateWithoutProvinsiInput> | KabupatenCreateWithoutProvinsiInput[] | KabupatenUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: KabupatenCreateOrConnectWithoutProvinsiInput | KabupatenCreateOrConnectWithoutProvinsiInput[]
    upsert?: KabupatenUpsertWithWhereUniqueWithoutProvinsiInput | KabupatenUpsertWithWhereUniqueWithoutProvinsiInput[]
    createMany?: KabupatenCreateManyProvinsiInputEnvelope
    set?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    disconnect?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    delete?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    connect?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    update?: KabupatenUpdateWithWhereUniqueWithoutProvinsiInput | KabupatenUpdateWithWhereUniqueWithoutProvinsiInput[]
    updateMany?: KabupatenUpdateManyWithWhereWithoutProvinsiInput | KabupatenUpdateManyWithWhereWithoutProvinsiInput[]
    deleteMany?: KabupatenScalarWhereInput | KabupatenScalarWhereInput[]
  }

  export type DataPenerimaBantuanUncheckedUpdateManyWithoutProvinsiNestedInput = {
    create?: XOR<DataPenerimaBantuanCreateWithoutProvinsiInput, DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput> | DataPenerimaBantuanCreateWithoutProvinsiInput[] | DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput | DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput[]
    upsert?: DataPenerimaBantuanUpsertWithWhereUniqueWithoutProvinsiInput | DataPenerimaBantuanUpsertWithWhereUniqueWithoutProvinsiInput[]
    createMany?: DataPenerimaBantuanCreateManyProvinsiInputEnvelope
    set?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    disconnect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    delete?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    connect?: DataPenerimaBantuanWhereUniqueInput | DataPenerimaBantuanWhereUniqueInput[]
    update?: DataPenerimaBantuanUpdateWithWhereUniqueWithoutProvinsiInput | DataPenerimaBantuanUpdateWithWhereUniqueWithoutProvinsiInput[]
    updateMany?: DataPenerimaBantuanUpdateManyWithWhereWithoutProvinsiInput | DataPenerimaBantuanUpdateManyWithWhereWithoutProvinsiInput[]
    deleteMany?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
  }

  export type KabupatenUncheckedUpdateManyWithoutProvinsiNestedInput = {
    create?: XOR<KabupatenCreateWithoutProvinsiInput, KabupatenUncheckedCreateWithoutProvinsiInput> | KabupatenCreateWithoutProvinsiInput[] | KabupatenUncheckedCreateWithoutProvinsiInput[]
    connectOrCreate?: KabupatenCreateOrConnectWithoutProvinsiInput | KabupatenCreateOrConnectWithoutProvinsiInput[]
    upsert?: KabupatenUpsertWithWhereUniqueWithoutProvinsiInput | KabupatenUpsertWithWhereUniqueWithoutProvinsiInput[]
    createMany?: KabupatenCreateManyProvinsiInputEnvelope
    set?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    disconnect?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    delete?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    connect?: KabupatenWhereUniqueInput | KabupatenWhereUniqueInput[]
    update?: KabupatenUpdateWithWhereUniqueWithoutProvinsiInput | KabupatenUpdateWithWhereUniqueWithoutProvinsiInput[]
    updateMany?: KabupatenUpdateManyWithWhereWithoutProvinsiInput | KabupatenUpdateManyWithWhereWithoutProvinsiInput[]
    deleteMany?: KabupatenScalarWhereInput | KabupatenScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[]
    notIn?: $Enums.status[]
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[]
    notIn?: $Enums.status[]
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type kecamatanCreateWithoutDataPenerimaBantuansInput = {
    id: string
    namaKecamatan: string
    kabupaten: KabupatenCreateNestedOneWithoutKecamatanInput
  }

  export type kecamatanUncheckedCreateWithoutDataPenerimaBantuansInput = {
    id: string
    namaKecamatan: string
    kabupatenId: string
  }

  export type kecamatanCreateOrConnectWithoutDataPenerimaBantuansInput = {
    where: kecamatanWhereUniqueInput
    create: XOR<kecamatanCreateWithoutDataPenerimaBantuansInput, kecamatanUncheckedCreateWithoutDataPenerimaBantuansInput>
  }

  export type KabupatenCreateWithoutDataPenerimaBantuansInput = {
    id: string
    namaKabupaten: string
    provinsi: ProvinsiCreateNestedOneWithoutKabupatenInput
    kecamatan?: kecamatanCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenUncheckedCreateWithoutDataPenerimaBantuansInput = {
    id: string
    namaKabupaten: string
    provinsiId: string
    kecamatan?: kecamatanUncheckedCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenCreateOrConnectWithoutDataPenerimaBantuansInput = {
    where: KabupatenWhereUniqueInput
    create: XOR<KabupatenCreateWithoutDataPenerimaBantuansInput, KabupatenUncheckedCreateWithoutDataPenerimaBantuansInput>
  }

  export type ProvinsiCreateWithoutDataPenerimaBantuansInput = {
    id: string
    namaProvinsi: string
    kabupaten?: KabupatenCreateNestedManyWithoutProvinsiInput
  }

  export type ProvinsiUncheckedCreateWithoutDataPenerimaBantuansInput = {
    id: string
    namaProvinsi: string
    kabupaten?: KabupatenUncheckedCreateNestedManyWithoutProvinsiInput
  }

  export type ProvinsiCreateOrConnectWithoutDataPenerimaBantuansInput = {
    where: ProvinsiWhereUniqueInput
    create: XOR<ProvinsiCreateWithoutDataPenerimaBantuansInput, ProvinsiUncheckedCreateWithoutDataPenerimaBantuansInput>
  }

  export type kecamatanUpsertWithoutDataPenerimaBantuansInput = {
    update: XOR<kecamatanUpdateWithoutDataPenerimaBantuansInput, kecamatanUncheckedUpdateWithoutDataPenerimaBantuansInput>
    create: XOR<kecamatanCreateWithoutDataPenerimaBantuansInput, kecamatanUncheckedCreateWithoutDataPenerimaBantuansInput>
    where?: kecamatanWhereInput
  }

  export type kecamatanUpdateToOneWithWhereWithoutDataPenerimaBantuansInput = {
    where?: kecamatanWhereInput
    data: XOR<kecamatanUpdateWithoutDataPenerimaBantuansInput, kecamatanUncheckedUpdateWithoutDataPenerimaBantuansInput>
  }

  export type kecamatanUpdateWithoutDataPenerimaBantuansInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    kabupaten?: KabupatenUpdateOneRequiredWithoutKecamatanNestedInput
  }

  export type kecamatanUncheckedUpdateWithoutDataPenerimaBantuansInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
  }

  export type KabupatenUpsertWithoutDataPenerimaBantuansInput = {
    update: XOR<KabupatenUpdateWithoutDataPenerimaBantuansInput, KabupatenUncheckedUpdateWithoutDataPenerimaBantuansInput>
    create: XOR<KabupatenCreateWithoutDataPenerimaBantuansInput, KabupatenUncheckedCreateWithoutDataPenerimaBantuansInput>
    where?: KabupatenWhereInput
  }

  export type KabupatenUpdateToOneWithWhereWithoutDataPenerimaBantuansInput = {
    where?: KabupatenWhereInput
    data: XOR<KabupatenUpdateWithoutDataPenerimaBantuansInput, KabupatenUncheckedUpdateWithoutDataPenerimaBantuansInput>
  }

  export type KabupatenUpdateWithoutDataPenerimaBantuansInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsi?: ProvinsiUpdateOneRequiredWithoutKabupatenNestedInput
    kecamatan?: kecamatanUpdateManyWithoutKabupatenNestedInput
  }

  export type KabupatenUncheckedUpdateWithoutDataPenerimaBantuansInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kecamatan?: kecamatanUncheckedUpdateManyWithoutKabupatenNestedInput
  }

  export type ProvinsiUpsertWithoutDataPenerimaBantuansInput = {
    update: XOR<ProvinsiUpdateWithoutDataPenerimaBantuansInput, ProvinsiUncheckedUpdateWithoutDataPenerimaBantuansInput>
    create: XOR<ProvinsiCreateWithoutDataPenerimaBantuansInput, ProvinsiUncheckedCreateWithoutDataPenerimaBantuansInput>
    where?: ProvinsiWhereInput
  }

  export type ProvinsiUpdateToOneWithWhereWithoutDataPenerimaBantuansInput = {
    where?: ProvinsiWhereInput
    data: XOR<ProvinsiUpdateWithoutDataPenerimaBantuansInput, ProvinsiUncheckedUpdateWithoutDataPenerimaBantuansInput>
  }

  export type ProvinsiUpdateWithoutDataPenerimaBantuansInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: KabupatenUpdateManyWithoutProvinsiNestedInput
  }

  export type ProvinsiUncheckedUpdateWithoutDataPenerimaBantuansInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: KabupatenUncheckedUpdateManyWithoutProvinsiNestedInput
  }

  export type DataPenerimaBantuanCreateWithoutKecamatanInput = {
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
    kabupaten: KabupatenCreateNestedOneWithoutDataPenerimaBantuansInput
    provinsi: ProvinsiCreateNestedOneWithoutDataPenerimaBantuansInput
  }

  export type DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    provinsiId: string
    kabupatenId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type DataPenerimaBantuanCreateOrConnectWithoutKecamatanInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    create: XOR<DataPenerimaBantuanCreateWithoutKecamatanInput, DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput>
  }

  export type DataPenerimaBantuanCreateManyKecamatanInputEnvelope = {
    data: DataPenerimaBantuanCreateManyKecamatanInput | DataPenerimaBantuanCreateManyKecamatanInput[]
    skipDuplicates?: boolean
  }

  export type KabupatenCreateWithoutKecamatanInput = {
    id: string
    namaKabupaten: string
    provinsi: ProvinsiCreateNestedOneWithoutKabupatenInput
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenUncheckedCreateWithoutKecamatanInput = {
    id: string
    namaKabupaten: string
    provinsiId: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenCreateOrConnectWithoutKecamatanInput = {
    where: KabupatenWhereUniqueInput
    create: XOR<KabupatenCreateWithoutKecamatanInput, KabupatenUncheckedCreateWithoutKecamatanInput>
  }

  export type DataPenerimaBantuanUpsertWithWhereUniqueWithoutKecamatanInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    update: XOR<DataPenerimaBantuanUpdateWithoutKecamatanInput, DataPenerimaBantuanUncheckedUpdateWithoutKecamatanInput>
    create: XOR<DataPenerimaBantuanCreateWithoutKecamatanInput, DataPenerimaBantuanUncheckedCreateWithoutKecamatanInput>
  }

  export type DataPenerimaBantuanUpdateWithWhereUniqueWithoutKecamatanInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    data: XOR<DataPenerimaBantuanUpdateWithoutKecamatanInput, DataPenerimaBantuanUncheckedUpdateWithoutKecamatanInput>
  }

  export type DataPenerimaBantuanUpdateManyWithWhereWithoutKecamatanInput = {
    where: DataPenerimaBantuanScalarWhereInput
    data: XOR<DataPenerimaBantuanUpdateManyMutationInput, DataPenerimaBantuanUncheckedUpdateManyWithoutKecamatanInput>
  }

  export type DataPenerimaBantuanScalarWhereInput = {
    AND?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
    OR?: DataPenerimaBantuanScalarWhereInput[]
    NOT?: DataPenerimaBantuanScalarWhereInput | DataPenerimaBantuanScalarWhereInput[]
    id?: IntFilter<"DataPenerimaBantuan"> | number
    namaProgram?: StringFilter<"DataPenerimaBantuan"> | string
    jumlahPenerima?: IntFilter<"DataPenerimaBantuan"> | number
    tanggalPenyaluran?: DateTimeFilter<"DataPenerimaBantuan"> | Date | string
    provinsiId?: StringFilter<"DataPenerimaBantuan"> | string
    kecamatanId?: StringFilter<"DataPenerimaBantuan"> | string
    kabupatenId?: StringFilter<"DataPenerimaBantuan"> | string
    catatanTambahan?: StringNullableFilter<"DataPenerimaBantuan"> | string | null
    urlBuktiPenyaluran?: StringFilter<"DataPenerimaBantuan"> | string
    status?: EnumstatusFilter<"DataPenerimaBantuan"> | $Enums.status
    email?: StringFilter<"DataPenerimaBantuan"> | string
  }

  export type KabupatenUpsertWithoutKecamatanInput = {
    update: XOR<KabupatenUpdateWithoutKecamatanInput, KabupatenUncheckedUpdateWithoutKecamatanInput>
    create: XOR<KabupatenCreateWithoutKecamatanInput, KabupatenUncheckedCreateWithoutKecamatanInput>
    where?: KabupatenWhereInput
  }

  export type KabupatenUpdateToOneWithWhereWithoutKecamatanInput = {
    where?: KabupatenWhereInput
    data: XOR<KabupatenUpdateWithoutKecamatanInput, KabupatenUncheckedUpdateWithoutKecamatanInput>
  }

  export type KabupatenUpdateWithoutKecamatanInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsi?: ProvinsiUpdateOneRequiredWithoutKabupatenNestedInput
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutKabupatenNestedInput
  }

  export type KabupatenUncheckedUpdateWithoutKecamatanInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutKabupatenNestedInput
  }

  export type ProvinsiCreateWithoutKabupatenInput = {
    id: string
    namaProvinsi: string
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutProvinsiInput
  }

  export type ProvinsiUncheckedCreateWithoutKabupatenInput = {
    id: string
    namaProvinsi: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutProvinsiInput
  }

  export type ProvinsiCreateOrConnectWithoutKabupatenInput = {
    where: ProvinsiWhereUniqueInput
    create: XOR<ProvinsiCreateWithoutKabupatenInput, ProvinsiUncheckedCreateWithoutKabupatenInput>
  }

  export type DataPenerimaBantuanCreateWithoutKabupatenInput = {
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
    kecamatan: kecamatanCreateNestedOneWithoutDataPenerimaBantuansInput
    provinsi: ProvinsiCreateNestedOneWithoutDataPenerimaBantuansInput
  }

  export type DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    provinsiId: string
    kecamatanId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type DataPenerimaBantuanCreateOrConnectWithoutKabupatenInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    create: XOR<DataPenerimaBantuanCreateWithoutKabupatenInput, DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput>
  }

  export type DataPenerimaBantuanCreateManyKabupatenInputEnvelope = {
    data: DataPenerimaBantuanCreateManyKabupatenInput | DataPenerimaBantuanCreateManyKabupatenInput[]
    skipDuplicates?: boolean
  }

  export type kecamatanCreateWithoutKabupatenInput = {
    id: string
    namaKecamatan: string
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutKecamatanInput
  }

  export type kecamatanUncheckedCreateWithoutKabupatenInput = {
    id: string
    namaKecamatan: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutKecamatanInput
  }

  export type kecamatanCreateOrConnectWithoutKabupatenInput = {
    where: kecamatanWhereUniqueInput
    create: XOR<kecamatanCreateWithoutKabupatenInput, kecamatanUncheckedCreateWithoutKabupatenInput>
  }

  export type kecamatanCreateManyKabupatenInputEnvelope = {
    data: kecamatanCreateManyKabupatenInput | kecamatanCreateManyKabupatenInput[]
    skipDuplicates?: boolean
  }

  export type ProvinsiUpsertWithoutKabupatenInput = {
    update: XOR<ProvinsiUpdateWithoutKabupatenInput, ProvinsiUncheckedUpdateWithoutKabupatenInput>
    create: XOR<ProvinsiCreateWithoutKabupatenInput, ProvinsiUncheckedCreateWithoutKabupatenInput>
    where?: ProvinsiWhereInput
  }

  export type ProvinsiUpdateToOneWithWhereWithoutKabupatenInput = {
    where?: ProvinsiWhereInput
    data: XOR<ProvinsiUpdateWithoutKabupatenInput, ProvinsiUncheckedUpdateWithoutKabupatenInput>
  }

  export type ProvinsiUpdateWithoutKabupatenInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutProvinsiNestedInput
  }

  export type ProvinsiUncheckedUpdateWithoutKabupatenInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaProvinsi?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutProvinsiNestedInput
  }

  export type DataPenerimaBantuanUpsertWithWhereUniqueWithoutKabupatenInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    update: XOR<DataPenerimaBantuanUpdateWithoutKabupatenInput, DataPenerimaBantuanUncheckedUpdateWithoutKabupatenInput>
    create: XOR<DataPenerimaBantuanCreateWithoutKabupatenInput, DataPenerimaBantuanUncheckedCreateWithoutKabupatenInput>
  }

  export type DataPenerimaBantuanUpdateWithWhereUniqueWithoutKabupatenInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    data: XOR<DataPenerimaBantuanUpdateWithoutKabupatenInput, DataPenerimaBantuanUncheckedUpdateWithoutKabupatenInput>
  }

  export type DataPenerimaBantuanUpdateManyWithWhereWithoutKabupatenInput = {
    where: DataPenerimaBantuanScalarWhereInput
    data: XOR<DataPenerimaBantuanUpdateManyMutationInput, DataPenerimaBantuanUncheckedUpdateManyWithoutKabupatenInput>
  }

  export type kecamatanUpsertWithWhereUniqueWithoutKabupatenInput = {
    where: kecamatanWhereUniqueInput
    update: XOR<kecamatanUpdateWithoutKabupatenInput, kecamatanUncheckedUpdateWithoutKabupatenInput>
    create: XOR<kecamatanCreateWithoutKabupatenInput, kecamatanUncheckedCreateWithoutKabupatenInput>
  }

  export type kecamatanUpdateWithWhereUniqueWithoutKabupatenInput = {
    where: kecamatanWhereUniqueInput
    data: XOR<kecamatanUpdateWithoutKabupatenInput, kecamatanUncheckedUpdateWithoutKabupatenInput>
  }

  export type kecamatanUpdateManyWithWhereWithoutKabupatenInput = {
    where: kecamatanScalarWhereInput
    data: XOR<kecamatanUpdateManyMutationInput, kecamatanUncheckedUpdateManyWithoutKabupatenInput>
  }

  export type kecamatanScalarWhereInput = {
    AND?: kecamatanScalarWhereInput | kecamatanScalarWhereInput[]
    OR?: kecamatanScalarWhereInput[]
    NOT?: kecamatanScalarWhereInput | kecamatanScalarWhereInput[]
    id?: StringFilter<"kecamatan"> | string
    namaKecamatan?: StringFilter<"kecamatan"> | string
    kabupatenId?: StringFilter<"kecamatan"> | string
  }

  export type DataPenerimaBantuanCreateWithoutProvinsiInput = {
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
    kecamatan: kecamatanCreateNestedOneWithoutDataPenerimaBantuansInput
    kabupaten: KabupatenCreateNestedOneWithoutDataPenerimaBantuansInput
  }

  export type DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    kecamatanId: string
    kabupatenId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type DataPenerimaBantuanCreateOrConnectWithoutProvinsiInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    create: XOR<DataPenerimaBantuanCreateWithoutProvinsiInput, DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput>
  }

  export type DataPenerimaBantuanCreateManyProvinsiInputEnvelope = {
    data: DataPenerimaBantuanCreateManyProvinsiInput | DataPenerimaBantuanCreateManyProvinsiInput[]
    skipDuplicates?: boolean
  }

  export type KabupatenCreateWithoutProvinsiInput = {
    id: string
    namaKabupaten: string
    dataPenerimaBantuans?: DataPenerimaBantuanCreateNestedManyWithoutKabupatenInput
    kecamatan?: kecamatanCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenUncheckedCreateWithoutProvinsiInput = {
    id: string
    namaKabupaten: string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedCreateNestedManyWithoutKabupatenInput
    kecamatan?: kecamatanUncheckedCreateNestedManyWithoutKabupatenInput
  }

  export type KabupatenCreateOrConnectWithoutProvinsiInput = {
    where: KabupatenWhereUniqueInput
    create: XOR<KabupatenCreateWithoutProvinsiInput, KabupatenUncheckedCreateWithoutProvinsiInput>
  }

  export type KabupatenCreateManyProvinsiInputEnvelope = {
    data: KabupatenCreateManyProvinsiInput | KabupatenCreateManyProvinsiInput[]
    skipDuplicates?: boolean
  }

  export type DataPenerimaBantuanUpsertWithWhereUniqueWithoutProvinsiInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    update: XOR<DataPenerimaBantuanUpdateWithoutProvinsiInput, DataPenerimaBantuanUncheckedUpdateWithoutProvinsiInput>
    create: XOR<DataPenerimaBantuanCreateWithoutProvinsiInput, DataPenerimaBantuanUncheckedCreateWithoutProvinsiInput>
  }

  export type DataPenerimaBantuanUpdateWithWhereUniqueWithoutProvinsiInput = {
    where: DataPenerimaBantuanWhereUniqueInput
    data: XOR<DataPenerimaBantuanUpdateWithoutProvinsiInput, DataPenerimaBantuanUncheckedUpdateWithoutProvinsiInput>
  }

  export type DataPenerimaBantuanUpdateManyWithWhereWithoutProvinsiInput = {
    where: DataPenerimaBantuanScalarWhereInput
    data: XOR<DataPenerimaBantuanUpdateManyMutationInput, DataPenerimaBantuanUncheckedUpdateManyWithoutProvinsiInput>
  }

  export type KabupatenUpsertWithWhereUniqueWithoutProvinsiInput = {
    where: KabupatenWhereUniqueInput
    update: XOR<KabupatenUpdateWithoutProvinsiInput, KabupatenUncheckedUpdateWithoutProvinsiInput>
    create: XOR<KabupatenCreateWithoutProvinsiInput, KabupatenUncheckedCreateWithoutProvinsiInput>
  }

  export type KabupatenUpdateWithWhereUniqueWithoutProvinsiInput = {
    where: KabupatenWhereUniqueInput
    data: XOR<KabupatenUpdateWithoutProvinsiInput, KabupatenUncheckedUpdateWithoutProvinsiInput>
  }

  export type KabupatenUpdateManyWithWhereWithoutProvinsiInput = {
    where: KabupatenScalarWhereInput
    data: XOR<KabupatenUpdateManyMutationInput, KabupatenUncheckedUpdateManyWithoutProvinsiInput>
  }

  export type KabupatenScalarWhereInput = {
    AND?: KabupatenScalarWhereInput | KabupatenScalarWhereInput[]
    OR?: KabupatenScalarWhereInput[]
    NOT?: KabupatenScalarWhereInput | KabupatenScalarWhereInput[]
    id?: StringFilter<"Kabupaten"> | string
    namaKabupaten?: StringFilter<"Kabupaten"> | string
    provinsiId?: StringFilter<"Kabupaten"> | string
  }

  export type DataPenerimaBantuanCreateManyKecamatanInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    provinsiId: string
    kabupatenId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type DataPenerimaBantuanUpdateWithoutKecamatanInput = {
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
    kabupaten?: KabupatenUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
    provinsi?: ProvinsiUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
  }

  export type DataPenerimaBantuanUncheckedUpdateWithoutKecamatanInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanUncheckedUpdateManyWithoutKecamatanInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanCreateManyKabupatenInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    provinsiId: string
    kecamatanId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type kecamatanCreateManyKabupatenInput = {
    id: string
    namaKecamatan: string
  }

  export type DataPenerimaBantuanUpdateWithoutKabupatenInput = {
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
    kecamatan?: kecamatanUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
    provinsi?: ProvinsiUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
  }

  export type DataPenerimaBantuanUncheckedUpdateWithoutKabupatenInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kecamatanId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanUncheckedUpdateManyWithoutKabupatenInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    provinsiId?: StringFieldUpdateOperationsInput | string
    kecamatanId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type kecamatanUpdateWithoutKabupatenInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutKecamatanNestedInput
  }

  export type kecamatanUncheckedUpdateWithoutKabupatenInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutKecamatanNestedInput
  }

  export type kecamatanUncheckedUpdateManyWithoutKabupatenInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKecamatan?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanCreateManyProvinsiInput = {
    id?: number
    namaProgram: string
    jumlahPenerima: number
    tanggalPenyaluran: Date | string
    kecamatanId: string
    kabupatenId: string
    catatanTambahan?: string | null
    urlBuktiPenyaluran: string
    status?: $Enums.status
    email: string
  }

  export type KabupatenCreateManyProvinsiInput = {
    id: string
    namaKabupaten: string
  }

  export type DataPenerimaBantuanUpdateWithoutProvinsiInput = {
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
    kecamatan?: kecamatanUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
    kabupaten?: KabupatenUpdateOneRequiredWithoutDataPenerimaBantuansNestedInput
  }

  export type DataPenerimaBantuanUncheckedUpdateWithoutProvinsiInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    kecamatanId?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DataPenerimaBantuanUncheckedUpdateManyWithoutProvinsiInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaProgram?: StringFieldUpdateOperationsInput | string
    jumlahPenerima?: IntFieldUpdateOperationsInput | number
    tanggalPenyaluran?: DateTimeFieldUpdateOperationsInput | Date | string
    kecamatanId?: StringFieldUpdateOperationsInput | string
    kabupatenId?: StringFieldUpdateOperationsInput | string
    catatanTambahan?: NullableStringFieldUpdateOperationsInput | string | null
    urlBuktiPenyaluran?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    email?: StringFieldUpdateOperationsInput | string
  }

  export type KabupatenUpdateWithoutProvinsiInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUpdateManyWithoutKabupatenNestedInput
    kecamatan?: kecamatanUpdateManyWithoutKabupatenNestedInput
  }

  export type KabupatenUncheckedUpdateWithoutProvinsiInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
    dataPenerimaBantuans?: DataPenerimaBantuanUncheckedUpdateManyWithoutKabupatenNestedInput
    kecamatan?: kecamatanUncheckedUpdateManyWithoutKabupatenNestedInput
  }

  export type KabupatenUncheckedUpdateManyWithoutProvinsiInput = {
    id?: StringFieldUpdateOperationsInput | string
    namaKabupaten?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use KecamatanCountOutputTypeDefaultArgs instead
     */
    export type KecamatanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KecamatanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KabupatenCountOutputTypeDefaultArgs instead
     */
    export type KabupatenCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KabupatenCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProvinsiCountOutputTypeDefaultArgs instead
     */
    export type ProvinsiCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProvinsiCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DataPenerimaBantuanDefaultArgs instead
     */
    export type DataPenerimaBantuanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DataPenerimaBantuanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use kecamatanDefaultArgs instead
     */
    export type kecamatanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = kecamatanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KabupatenDefaultArgs instead
     */
    export type KabupatenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KabupatenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProvinsiDefaultArgs instead
     */
    export type ProvinsiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProvinsiDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}